{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/notify.service\";\nexport class SavingsService {\n  constructor(http, notifyService) {\n    this.http = http;\n    this.notifyService = notifyService;\n    this.url = environment.apiUrl + 'savings/';\n    this.balance$ = new BehaviorSubject(null);\n  }\n  create(saving) {\n    return this.http.post(this.url, saving).pipe(map(saving => {\n      this.notifyService.showSuccess('Saving successfully created');\n      this.getBalance().subscribe();\n      return saving;\n    }), catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n  findAll(options) {\n    return this.http.get(this.url, {\n      params: {\n        ...options\n      }\n    }).pipe(catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n  update(saving) {\n    return this.http.put(this.url, saving).pipe(map(() => {\n      this.notifyService.showSuccess('Saving successfully updated');\n      this.getBalance().subscribe();\n    }), catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n  delete(id) {\n    return this.http.delete(this.url, {\n      params: {\n        id\n      }\n    }).pipe(map(() => {\n      this.notifyService.showSuccess('Saving successfully deleted');\n      this.getBalance().subscribe();\n    }), catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n  getBalance() {\n    return this.http.get(this.url + 'balance').pipe(map(value => this.balance$.next(value)), catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n}\nSavingsService.ɵfac = function SavingsService_Factory(t) {\n  return new (t || SavingsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotifyService));\n};\nSavingsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SavingsService,\n  factory: SavingsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAcC,UAAU,QAAQ,MAAM;AAC9D,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,8BAA8B;;;;AAU1D,OAAM,MAAOC,cAAc;EAIvBC,YACYC,IAAgB,EAChBC,aAA4B;IAD5B,SAAI,GAAJD,IAAI;IACJ,kBAAa,GAAbC,aAAa;IALR,QAAG,GAAGJ,WAAW,CAACK,MAAM,GAAG,UAAU;IACtD,aAAQ,GAAG,IAAIT,eAAe,CAAgB,IAAI,CAAC;EAK/C;EAEJU,MAAM,CAACC,MAAoB;IACvB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAS,IAAI,CAACC,GAAG,EAAEF,MAAM,CAAC,CAACG,IAAI,CAChDX,GAAG,CAACQ,MAAM,IAAG;MACT,IAAI,CAACH,aAAa,CAACO,WAAW,CAAC,6BAA6B,CAAC;MAC7D,IAAI,CAACC,UAAU,EAAE,CAACC,SAAS,EAAE;MAC7B,OAAON,MAAM;IACjB,CAAC,CAAC,EACFT,UAAU,CAACgB,KAAK,IAAG;MACf,IAAI,CAACV,aAAa,CAACW,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MACjD,MAAMF,KAAK;IACf,CAAC,CAAC,CACL;EACL;EAEAG,OAAO,CAACC,OAAuB;IAC3B,OAAO,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAW,IAAI,CAACV,GAAG,EAAE;MACrCW,MAAM,EAAE;QAAC,GAAGF;MAAO;KACtB,CAAC,CAACR,IAAI,CACHZ,UAAU,CAACuB,GAAG,IAAG;MACb,IAAI,CAACjB,aAAa,CAACW,SAAS,CAACM,GAAG,CAACP,KAAK,CAACE,OAAO,CAAC;MAC/C,OAAOnB,UAAU,CAACwB,GAAG,CAAC;IAC1B,CAAC,CAAC,CACL;EACL;EAEAC,MAAM,CAACf,MAAoB;IACvB,OAAO,IAAI,CAACJ,IAAI,CAACoB,GAAG,CAAO,IAAI,CAACd,GAAG,EAAEF,MAAM,CAAC,CAACG,IAAI,CAC7CX,GAAG,CAAC,MAAK;MACL,IAAI,CAACK,aAAa,CAACO,WAAW,CAAC,6BAA6B,CAAC;MAC7D,IAAI,CAACC,UAAU,EAAE,CAACC,SAAS,EAAE;IACjC,CAAC,CAAC,EACFf,UAAU,CAACgB,KAAK,IAAG;MACf,IAAI,CAACV,aAAa,CAACW,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MACjD,MAAMF,KAAK;IACf,CAAC,CAAC,CACL;EACL;EAEAU,MAAM,CAACC,EAAU;IACb,OAAO,IAAI,CAACtB,IAAI,CAACqB,MAAM,CAAO,IAAI,CAACf,GAAG,EAAE;MAAEW,MAAM,EAAE;QAAEK;MAAE;IAAE,CAAE,CAAC,CAACf,IAAI,CAC5DX,GAAG,CAAC,MAAK;MACL,IAAI,CAACK,aAAa,CAACO,WAAW,CAAC,6BAA6B,CAAC;MAC7D,IAAI,CAACC,UAAU,EAAE,CAACC,SAAS,EAAE;IACjC,CAAC,CAAC,EACFf,UAAU,CAACgB,KAAK,IAAG;MACf,IAAI,CAACV,aAAa,CAACW,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MACjD,MAAMF,KAAK;IACf,CAAC,CAAC,CACL;EACL;EAEAF,UAAU;IACN,OAAO,IAAI,CAACT,IAAI,CAACgB,GAAG,CAAS,IAAI,CAACV,GAAG,GAAG,SAAS,CAAC,CAACC,IAAI,CACnDX,GAAG,CAAC2B,KAAK,IAAI,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACF,KAAK,CAAC,CAAC,EACvC5B,UAAU,CAACgB,KAAK,IAAG;MACf,IAAI,CAACV,aAAa,CAACW,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MACjD,MAAMF,KAAK;IACf,CAAC,CAAC,CACL;EACL;;AApESb,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA4B,SAAd5B,cAAc;EAAA6B,YAFX;AAAM","names":["BehaviorSubject","throwError","catchError","map","environment","SavingsService","constructor","http","notifyService","apiUrl","create","saving","post","url","pipe","showSuccess","getBalance","subscribe","error","showError","message","findAll","options","get","params","err","update","put","delete","id","value","balance$","next","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\savings\\savings.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { environment } from 'src/environments/environment'; \nimport { NotifyService } from 'src/app/shared/services/notify.service';\nimport { CreateSaving } from './interfaces/create-saving.interface';\nimport { FindOperations } from './interfaces/find-savings.interface';\nimport { UpdateSaving } from './interfaces/update-saving.interface';\nimport { Saving } from './interfaces/saving.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SavingsService {\n    private readonly url = environment.apiUrl + 'savings/';\n    balance$ = new BehaviorSubject<number | null>(null);\n    \n    constructor(\n        private http: HttpClient,\n        private notifyService: NotifyService,\n    ) { }\n\n    create(saving: CreateSaving): Observable<Saving> {\n        return this.http.post<Saving>(this.url, saving).pipe(\n            map(saving => {\n                this.notifyService.showSuccess('Saving successfully created');\n                this.getBalance().subscribe();\n                return saving;\n            }),\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error;\n            })\n        );\n    }\n\n    findAll(options: FindOperations): Observable<Saving[]> {\n        return this.http.get<Saving[]>(this.url, {\n            params: {...options}\n        }).pipe(\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n\n    update(saving: UpdateSaving): Observable<void> {\n        return this.http.put<void>(this.url, saving).pipe(\n            map(() => {\n                this.notifyService.showSuccess('Saving successfully updated');\n                this.getBalance().subscribe();\n            }),\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error\n            })\n        );\n    }\n\n    delete(id: number): Observable<void> {\n        return this.http.delete<void>(this.url, { params: { id } }).pipe(\n            map(() => {\n                this.notifyService.showSuccess('Saving successfully deleted');\n                this.getBalance().subscribe();\n            }),\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error\n            })\n        );\n    }\n\n    getBalance(): Observable<void> {\n        return this.http.get<number>(this.url + 'balance').pipe(\n            map(value => this.balance$.next(value)),\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error\n            })\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}