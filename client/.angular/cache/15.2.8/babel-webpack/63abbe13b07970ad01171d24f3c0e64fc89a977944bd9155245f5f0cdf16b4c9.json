{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class TokenExpiredInterceptor {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      if (error.status === 401 && this.authService.getStatus()) {\n        this.authService.logout();\n        this.router.navigate(['/auth']);\n      }\n      throw error;\n    }));\n  }\n}\nTokenExpiredInterceptor.ɵfac = function TokenExpiredInterceptor_Factory(t) {\n  return new (t || TokenExpiredInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nTokenExpiredInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenExpiredInterceptor,\n  factory: TokenExpiredInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAGA,SAASA,UAAU,QAAQ,gBAAgB;;;;AAM3C,OAAM,MAAOC,uBAAuB;EAChCC,YACYC,WAAwB,EACxBC,MAAc;IADd,gBAAW,GAAXD,WAAW;IACX,WAAM,GAANC,MAAM;EACd;EAEJC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IAClD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC5BT,UAAU,CAACU,KAAK,IAAG;MACf,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,IAAI,IAAI,CAACR,WAAW,CAACS,SAAS,EAAE,EAAE;QACtD,IAAI,CAACT,WAAW,CAACU,MAAM,EAAE;QACzB,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;MAGnC,MAAMJ,KAAK;IACf,CAAC,CAAC,CACL;EACL;;AAjBST,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;SAAvBA,uBAAuB;EAAAc,SAAvBd,uBAAuB;AAAA","names":["catchError","TokenExpiredInterceptor","constructor","authService","router","intercept","request","next","handle","pipe","error","status","getStatus","logout","navigate","factory"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\auth\\interceptors\\token-expired.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class TokenExpiredInterceptor implements HttpInterceptor {\n    constructor(\n        private authService: AuthService,\n        private router: Router\n    ) { }\n    \n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(request).pipe(\n            catchError(error => {\n                if (error.status === 401 && this.authService.getStatus()) {\n                    this.authService.logout();\n                    this.router.navigate(['/auth']);\n                }\n\n                throw error;\n            })\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}