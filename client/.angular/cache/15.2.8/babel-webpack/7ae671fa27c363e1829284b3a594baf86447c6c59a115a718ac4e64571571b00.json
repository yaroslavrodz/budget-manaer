{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nexport class TokenInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    const status = this.authService.getStatus();\n    if (status) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${status.token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\nTokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n  return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptor,\n  factory: TokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,gBAAgB;EACzBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAiB;EAEhDC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IAClD,MAAMC,MAAM,GAAG,IAAI,CAACJ,WAAW,CAACK,SAAS,EAAE;IAC3C,IAAGD,MAAM,EAAE;MACPF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACpBC,UAAU,EAAE;UACRC,aAAa,EAAE,UAAUJ,MAAM,CAACK,KAAK;;OAE5C,CAAC;;IAGN,OAAON,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC/B;;AAdSJ,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAa,SAAhBb,gBAAgB;AAAA","names":["TokenInterceptor","constructor","authService","intercept","request","next","status","getStatus","clone","setHeaders","Authorization","token","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\auth\\interceptors\\token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n    constructor(private authService: AuthService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const status = this.authService.getStatus();\n        if(status) {\n            request = request.clone({\n                setHeaders: {\n                    Authorization: `Bearer ${status.token}`\n                }\n            });\n        }\n\n        return next.handle(request);\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}