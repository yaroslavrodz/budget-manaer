{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../savings/saving.service\";\nimport * as i3 from \"src/app/shared/services/notify.service\";\nimport * as i4 from \"src/app/shared/pipes/remove-null-values.pipe\";\nexport class OperationsService {\n  constructor(http, savingService, notifyService, removeNullValuesPipe) {\n    this.http = http;\n    this.savingService = savingService;\n    this.notifyService = notifyService;\n    this.removeNullValuesPipe = removeNullValuesPipe;\n    this.url = environment.apiUrl + 'operations/';\n  }\n  create(operation) {\n    return this.http.post(this.url, operation).pipe(map(operation => {\n      this.notifyService.showSuccess('Operation successfully created');\n      this.savingService.getBalance().subscribe();\n      return operation;\n    }), catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n  findAll(dto) {\n    return this.http.get(this.url, {\n      params: {\n        ...dto,\n        filter: JSON.stringify(dto.filter)\n      }\n    }).pipe(catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n  update(dto) {\n    return this.http.put(this.url, dto).pipe(map(() => {\n      this.notifyService.showSuccess('Operation successfully updated!');\n      this.savingService.getBalance().subscribe();\n    }), catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n  delete(id) {\n    return this.http.delete(this.url, {\n      params: {\n        id\n      }\n    }).pipe(map(() => {\n      this.notifyService.showSuccess('Operation successfully deleted!');\n      this.savingService.getBalance().subscribe();\n    }), catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n}\nOperationsService.ɵfac = function OperationsService_Factory(t) {\n  return new (t || OperationsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SavingService), i0.ɵɵinject(i3.NotifyService), i0.ɵɵinject(i4.RemoveNullValuesPipe));\n};\nOperationsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OperationsService,\n  factory: OperationsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,8BAA8B;;;;;;AAY1D,OAAM,MAAOC,iBAAiB;EAG1BC,YACYC,IAAgB,EAChBC,aAA4B,EAC5BC,aAA4B,EAC5BC,oBAA0C;IAH1C,SAAI,GAAJH,IAAI;IACJ,kBAAa,GAAbC,aAAa;IACb,kBAAa,GAAbC,aAAa;IACb,yBAAoB,GAApBC,oBAAoB;IANf,QAAG,GAAGN,WAAW,CAACO,MAAM,GAAG,aAAa;EAOrD;EAEJC,MAAM,CAACC,SAA0B;IAC7B,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAY,IAAI,CAACC,GAAG,EAAEF,SAAS,CAAC,CAACG,IAAI,CACtDb,GAAG,CAACU,SAAS,IAAG;MACZ,IAAI,CAACJ,aAAa,CAACQ,WAAW,CAAC,gCAAgC,CAAC;MAChE,IAAI,CAACT,aAAa,CAACU,UAAU,EAAE,CAACC,SAAS,EAAE;MAC3C,OAAON,SAAS;IACpB,CAAC,CAAC,EACFX,UAAU,CAACkB,KAAK,IAAG;MACf,IAAI,CAACX,aAAa,CAACY,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MACjD,MAAMF,KAAK;IACf,CAAC,CAAC,CACL;EACL;EAEAG,OAAO,CAACC,GAAmB;IACvB,OAAO,IAAI,CAACjB,IAAI,CAACkB,GAAG,CAAuC,IAAI,CAACV,GAAG,EAAE;MACjEW,MAAM,EAAE;QACJ,GAAGF,GAAG;QACNG,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,GAAG,CAACG,MAAM;;KAExC,CAAC,CAACX,IAAI,CACHd,UAAU,CAACkB,KAAK,IAAG;MACf,IAAI,CAACX,aAAa,CAACY,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MACjD,MAAMF,KAAK;IACf,CAAC,CAAC,CACL;EACL;EAGAU,MAAM,CAACN,GAAoB;IACvB,OAAO,IAAI,CAACjB,IAAI,CAACwB,GAAG,CAAO,IAAI,CAAChB,GAAG,EAAES,GAAG,CAAC,CAACR,IAAI,CAC1Cb,GAAG,CAAC,MAAK;MACL,IAAI,CAACM,aAAa,CAACQ,WAAW,CAAC,iCAAiC,CAAC;MACjE,IAAI,CAACT,aAAa,CAACU,UAAU,EAAE,CAACC,SAAS,EAAE;IAC/C,CAAC,CAAC,EACFjB,UAAU,CAACkB,KAAK,IAAG;MACf,IAAI,CAACX,aAAa,CAACY,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MACjD,MAAMF,KAAK;IACf,CAAC,CAAC,CACL;EACL;EAEAY,MAAM,CAACC,EAAU;IACb,OAAO,IAAI,CAAC1B,IAAI,CAACyB,MAAM,CAAO,IAAI,CAACjB,GAAG,EAAE;MACpCW,MAAM,EAAE;QAAEO;MAAE;KACf,CAAC,CAACjB,IAAI,CACHb,GAAG,CAAC,MAAK;MACL,IAAI,CAACM,aAAa,CAACQ,WAAW,CAAC,iCAAiC,CAAC;MACjE,IAAI,CAACT,aAAa,CAACU,UAAU,EAAE,CAACC,SAAS,EAAE;IAC/C,CAAC,CAAC,EACFjB,UAAU,CAACkB,KAAK,IAAG;MACf,IAAI,CAACX,aAAa,CAACY,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MACjD,MAAMF,KAAK;IACf,CAAC,CAAC,CACL;EACL;;AAjESf,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAA6B,SAAjB7B,iBAAiB;EAAA8B,YAFd;AAAM","names":["catchError","map","environment","OperationsService","constructor","http","savingService","notifyService","removeNullValuesPipe","apiUrl","create","operation","post","url","pipe","showSuccess","getBalance","subscribe","error","showError","message","findAll","dto","get","params","filter","JSON","stringify","update","put","delete","id","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\operations\\operations.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { environment } from 'src/environments/environment'; \nimport { NotifyService } from 'src/app/shared/services/notify.service';\nimport { SavingService } from '../savings/saving.service';\nimport { Operation } from './operation.model';\nimport { RemoveNullValuesPipe } from 'src/app/shared/pipes/remove-null-values.pipe';\nimport { CreateOperation } from './interfaces/create-operation.interface';\nimport { FindOperations } from './dto/find-operations.dto';\nimport { UpdateOperation } from './interfaces/update-operation.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class OperationsService {\n    private readonly url = environment.apiUrl + 'operations/';\n    \n    constructor(\n        private http: HttpClient,\n        private savingService: SavingService,\n        private notifyService: NotifyService,\n        private removeNullValuesPipe: RemoveNullValuesPipe,\n    ) { }\n \n    create(operation: CreateOperation): Observable<Operation> {\n        return this.http.post<Operation>(this.url, operation).pipe(\n            map(operation => {\n                this.notifyService.showSuccess('Operation successfully created');\n                this.savingService.getBalance().subscribe();\n                return operation;\n            }),\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error;\n            })\n        );\n    }\n\n    findAll(dto: FindOperations): Observable<{ count: number, rows: Operation[] }> {\n        return this.http.get<{ count: number, rows: Operation[] }>(this.url, {\n            params: {\n                ...dto,\n                filter: JSON.stringify(dto.filter)\n            }\n        }).pipe(\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error;\n            })\n        );\n    }\n\n\n    update(dto: UpdateOperation): Observable<void> {\n        return this.http.put<void>(this.url, dto).pipe(\n            map(() => {\n                this.notifyService.showSuccess('Operation successfully updated!');\n                this.savingService.getBalance().subscribe();\n            }), \n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error;\n            })\n        );\n    }\n\n    delete(id: number) {\n        return this.http.delete<void>(this.url, {\n            params: { id }\n        }).pipe(\n            map(() => {\n                this.notifyService.showSuccess('Operation successfully deleted!');\n                this.savingService.getBalance().subscribe();\n            }),\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error;\n            })\n        );\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}