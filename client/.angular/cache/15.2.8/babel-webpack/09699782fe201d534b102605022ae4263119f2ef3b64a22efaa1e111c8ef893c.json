{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction UpdateSavingModalComponent_div_9_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateSavingModalComponent_div_9_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Only latin characters and numbers allowed\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateSavingModalComponent_div_9_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Min length equals to 4 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateSavingModalComponent_div_9_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Max length equals to 12 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateSavingModalComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, UpdateSavingModalComponent_div_9_div_1_Template, 2, 0, \"div\", 12);\n    i0.ɵɵtemplate(2, UpdateSavingModalComponent_div_9_div_2_Template, 2, 0, \"div\", 12);\n    i0.ɵɵtemplate(3, UpdateSavingModalComponent_div_9_div_3_Template, 2, 0, \"div\", 12);\n    i0.ɵɵtemplate(4, UpdateSavingModalComponent_div_9_div_4_Template, 2, 0, \"div\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.name == null ? null : ctx_r0.name.errors == null ? null : ctx_r0.name.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.name == null ? null : ctx_r0.name.errors == null ? null : ctx_r0.name.errors[\"pattern\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.name == null ? null : ctx_r0.name.errors == null ? null : ctx_r0.name.errors[\"minlength\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.name == null ? null : ctx_r0.name.errors == null ? null : ctx_r0.name.errors[\"maxlength\"]);\n  }\n}\nfunction UpdateSavingModalComponent_div_14_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateSavingModalComponent_div_14_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Only numbers allowed\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateSavingModalComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, UpdateSavingModalComponent_div_14_div_1_Template, 2, 0, \"div\", 12);\n    i0.ɵɵtemplate(2, UpdateSavingModalComponent_div_14_div_2_Template, 2, 0, \"div\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.amount == null ? null : ctx_r1.amount.errors == null ? null : ctx_r1.amount.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.amount == null ? null : ctx_r1.amount.errors == null ? null : ctx_r1.amount.errors[\"pattern\"]);\n  }\n}\nfunction UpdateSavingModalComponent_option_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r9 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", type_r9);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", type_r9, \" \");\n  }\n}\nexport class UpdateSavingModalComponent {\n  get name() {\n    return this.form.get('name');\n  }\n  get amount() {\n    return this.form.get('amount');\n  }\n  constructor() {\n    this.types = [];\n    this.updatedSaving = new EventEmitter();\n    this.close = new EventEmitter();\n    this.form = new FormGroup({\n      name: new FormControl('', Validators.compose([Validators.required, Validators.minLength(4), Validators.maxLength(12), Validators.pattern('^[a-zA-Z0-9]+$')])),\n      type: new FormControl('', Validators.compose([Validators.required])),\n      amount: new FormControl('', Validators.compose([Validators.required, Validators.pattern('^[0-9]+([.]{1}[0-9]{1,2})?$')]))\n    });\n  }\n  update() {\n    this.updatedSaving.emit({\n      id: this.saving?.id,\n      userId: this.saving?.userId,\n      ...this.form.value\n    });\n    this.close.emit();\n  }\n  cancel() {\n    this.close.emit();\n  }\n}\nUpdateSavingModalComponent.ɵfac = function UpdateSavingModalComponent_Factory(t) {\n  return new (t || UpdateSavingModalComponent)();\n};\nUpdateSavingModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdateSavingModalComponent,\n  selectors: [[\"app-update-saving-modal\"]],\n  inputs: {\n    saving: \"saving\",\n    types: \"types\"\n  },\n  outputs: {\n    updatedSaving: \"updatedSaving\",\n    close: \"close\"\n  },\n  decls: 24,\n  vars: 5,\n  consts: [[1, \"modal\"], [1, \"modal-content\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"input-group\"], [\"type\", \"text\", \"placeholder\", \"Name\", \"formControlName\", \"name\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"type\", \"text\", \"placeholder\", \"Amount\", \"formControlName\", \"amount\"], [\"formControlName\", \"type\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 3, \"disabled\"], [3, \"click\"], [1, \"error-message\"], [4, \"ngIf\"], [3, \"value\"]],\n  template: function UpdateSavingModalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\");\n      i0.ɵɵtext(3, \"Update saving\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdateSavingModalComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.update();\n      });\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"label\");\n      i0.ɵɵtext(7, \"Name: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 4);\n      i0.ɵɵtemplate(9, UpdateSavingModalComponent_div_9_Template, 5, 4, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 3)(11, \"label\");\n      i0.ɵɵtext(12, \"Amount: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 6);\n      i0.ɵɵtemplate(14, UpdateSavingModalComponent_div_14_Template, 3, 2, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 3)(16, \"label\");\n      i0.ɵɵtext(17, \"Type: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"select\", 7);\n      i0.ɵɵtemplate(19, UpdateSavingModalComponent_option_19_Template, 2, 2, \"option\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(20, \"button\", 9);\n      i0.ɵɵtext(21, \" Update \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function UpdateSavingModalComponent_Template_button_click_22_listener() {\n        return ctx.cancel();\n      });\n      i0.ɵɵtext(23, \"Cancel\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.name == null ? null : ctx.name.invalid) && (ctx.name == null ? null : ctx.name.dirty));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.amount == null ? null : ctx.amount.invalid) && (ctx.amount == null ? null : ctx.amount.dirty));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.types);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.form.invalid);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","FormControl","FormGroup","Validators","i0","UpdateSavingModalComponent","name","form","get","amount","constructor","compose","required","minLength","maxLength","pattern","type","update","updatedSaving","emit","id","saving","userId","value","close","cancel","selectors","inputs","types","outputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\savings\\components\\update-saving-modal\\update-saving-modal.component.ts","C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\savings\\components\\update-saving-modal\\update-saving-modal.component.html"],"sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Saving } from '../../interfaces/saving.interface';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { UpdateSaving } from '../../interfaces/update-saving.interface';\nimport { SavingType } from '../../enums/saving-type.enum';\n\n@Component({\n    selector: 'app-update-saving-modal',\n    templateUrl: './update-saving-modal.component.html',\n    styleUrls: ['./update-saving-modal.component.scss']\n})\nexport class UpdateSavingModalComponent {\n    @Input() saving?: Saving;\n    @Input() types: SavingType[] = [];\n    @Output() updatedSaving = new EventEmitter<UpdateSaving>();\n    @Output() close = new EventEmitter<void>();\n\n    form = new FormGroup({\n        name: new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.minLength(4),\n            Validators.maxLength(12),\n            Validators.pattern('^[a-zA-Z0-9]+$'),\n        ])),\n        type: new FormControl('', Validators.compose([\n            Validators.required,\n        ])),\n        amount: new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.pattern('^[0-9]+([.]{1}[0-9]{1,2})?$'),\n        ]))\n    });\n\n    get name() { return this.form.get('name'); }\n    get amount() { return this.form.get('amount'); }\n\n    constructor() { }\n    \n    update() {\n        this.updatedSaving.emit({\n            id: this.saving?.id,\n            userId: this.saving?.userId,\n            ...this.form.value\n        } as unknown as UpdateSaving);\n        this.close.emit();\n    }\n\n    cancel(): void {\n        this.close.emit();\n    }\n}\n","<div class=\"modal\">\n    <div class=\"modal-content\">\n        <h2>Update saving</h2>\n      \n        <form [formGroup]=\"form\" (ngSubmit)=\"update()\">\n            <div class=\"input-group\">\n                <label>Name: </label>\n                \n                <input\n                    type=\"text\"\n                    placeholder=\"Name\"\n                    formControlName=\"name\">\n\n                <div \n                    *ngIf=\"name?.invalid && name?.dirty\"\n                    class=\"error-message\">\n\n                    <div *ngIf=\"name?.errors?.['required']\">Required</div>\n                    <div *ngIf=\"name?.errors?.['pattern']\">Only latin characters and numbers allowed</div>\n                    <div *ngIf=\"name?.errors?.['minlength']\">Min length equals to 4 characters</div>\n                    <div *ngIf=\"name?.errors?.['maxlength']\">Max length equals to 12 characters</div>\n                </div>\n            </div>\n\n            <div class=\"input-group\">\n                <label>Amount: </label>\n\n                <input\n                    type=\"text\"\n                    placeholder=\"Amount\"\n                    formControlName=\"amount\">\n\n                <div \n                    *ngIf=\"amount?.invalid && amount?.dirty\"\n                    class=\"error-message\">\n\n                    <div *ngIf=\"amount?.errors?.['required']\">Required</div>\n                    <div *ngIf=\"amount?. errors?.['pattern']\">Only numbers allowed</div>\n                </div>\n            </div>\n\n            <div class=\"input-group\">\n                <label>Type: </label>\n\n                <select formControlName=\"type\">\n                    <option\n                        *ngFor=\"let type of types\"\n                        value=\"{{ type }}\">\n                        {{ type }}\n                    </option>\n                </select>\n            </div>\n\n            <button\n                type=\"submit\"\n                [disabled]=\"form.invalid\">\n                Update\n            </button>\n\n            <button (click)=\"cancel()\">Cancel</button>\n        </form>\n    </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}