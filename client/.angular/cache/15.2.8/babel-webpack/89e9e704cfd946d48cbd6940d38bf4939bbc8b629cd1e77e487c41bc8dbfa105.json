{"ast":null,"code":"import { map, catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/modules/auth/auth.service\";\nimport * as i3 from \"src/app/shared/services/notify.service\";\nexport class UserService {\n  constructor(http, authService, notifyService) {\n    this.http = http;\n    this.authService = authService;\n    this.notifyService = notifyService;\n    this.url = environment.apiUrl + 'users/';\n  }\n  updateUser(options) {\n    return this.http.put(this.url, options).pipe(map(user => {\n      const status = this.authService.getStatus();\n      this.authService.setStatus({\n        ...status,\n        user\n      });\n      this.notifyService.showSuccess('User successfully updated');\n    }), catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n  updatePassword(options) {\n    return this.http.put(this.url + 'password', options).pipe(map(() => this.notifyService.showSuccess('Password successfully updated')), catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.NotifyService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,8BAA8B;;;;;AAU1D,OAAM,MAAOC,WAAW;EAGpBC,YACYC,IAAgB,EAChBC,WAAwB,EACxBC,aAA4B;IAF5B,SAAI,GAAJF,IAAI;IACJ,gBAAW,GAAXC,WAAW;IACX,kBAAa,GAAbC,aAAa;IALR,QAAG,GAAGL,WAAW,CAACM,MAAM,GAAG,QAAQ;EAMhD;EAEJC,UAAU,CAACC,OAAmB;IAC1B,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAO,IAAI,CAACC,GAAG,EAAEF,OAAO,CAAC,CAACG,IAAI,CAC9Cb,GAAG,CAAEc,IAAU,IAAI;MACf,MAAMC,MAAM,GAAG,IAAI,CAACT,WAAW,CAACU,SAAS,EAAE;MAC3C,IAAI,CAACV,WAAW,CAACW,SAAS,CAAC;QACvB,GAAGF,MAAO;QACVD;OACH,CAAC;MACF,IAAI,CAACP,aAAa,CAACW,WAAW,CAAC,2BAA2B,CAAC;IAC/D,CAAC,CAAC,EACFjB,UAAU,CAACkB,KAAK,IAAG;MACf,IAAI,CAACZ,aAAa,CAACa,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MACjD,MAAMF,KAAK;IACf,CAAC,CAAC,CACL;EACL;EAEAG,cAAc,CAACZ,OAAuB;IAClC,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAO,IAAI,CAACC,GAAG,GAAG,UAAU,EAAEF,OAAO,CAAC,CAACG,IAAI,CAC3Db,GAAG,CAAC,MAAM,IAAI,CAACO,aAAa,CAACW,WAAW,CAAC,+BAA+B,CAAC,CAAC,EAC1EjB,UAAU,CAACkB,KAAK,IAAG;MACf,IAAI,CAACZ,aAAa,CAACa,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MACjD,MAAMF,KAAK;IACf,CAAC,CAAC,CACL;EACL;;AAlCShB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAFR;AAAM","names":["map","catchError","environment","UserService","constructor","http","authService","notifyService","apiUrl","updateUser","options","put","url","pipe","user","status","getStatus","setStatus","showSuccess","error","showError","message","updatePassword","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\user\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { environment } from 'src/environments/environment';\nimport { AuthService } from 'src/app/modules/auth/auth.service';\nimport { NotifyService } from 'src/app/shared/services/notify.service';\nimport { UpdatePassword } from './interfaces/update-password.interface';\nimport { UpdateUser } from './interfaces/update-user.interface';\nimport { User } from './interfaces/user.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserService {\n    private readonly url = environment.apiUrl + 'users/';\n\n    constructor(\n        private http: HttpClient,\n        private authService: AuthService,\n        private notifyService: NotifyService,\n    ) { }\n\n    updateUser(options: UpdateUser): Observable<void> {\n        return this.http.put<User>(this.url, options).pipe(\n            map((user: User) => {\n                const status = this.authService.getStatus();\n                this.authService.setStatus({\n                    ...status!,\n                    user\n                });\n                this.notifyService.showSuccess('User successfully updated')\n            }),\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error;\n            })\n        );\n    }\n\n    updatePassword(options: UpdatePassword): Observable<void> {\n        return this.http.put<void>(this.url + 'password', options).pipe(\n            map(() => this.notifyService.showSuccess('Password successfully updated')),\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error;\n            })\n        );\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}