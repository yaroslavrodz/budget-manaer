{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/modules/auth/auth.service\";\nimport * as i3 from \"src/app/shared/services/notify.service\";\nexport class UserService {\n  constructor(http, authService, notifyService) {\n    this.http = http;\n    this.authService = authService;\n    this.notifyService = notifyService;\n    this.url = environment.apiUrl + 'users/';\n  }\n  updateUser(userDto) {\n    return this.http.put(this.url, userDto).pipe(map(user => {\n      // const status = this.authService.getStatus();\n      // this.authService.setCurrentUser({ ...user, token });\n      this.notifyService.showSuccess('User successfully updated!');\n    }), catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n  updatePassword(passwordDto) {\n    return this.http.put(this.url + 'password', passwordDto).pipe(map(() => this.notifyService.showSuccess('Password successfully updated!')), catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.NotifyService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,8BAA8B;;;;;AAU1D,OAAM,MAAOC,WAAW;EAGpBC,YACYC,IAAgB,EAChBC,WAAwB,EACxBC,aAA4B;IAF5B,SAAI,GAAJF,IAAI;IACJ,gBAAW,GAAXC,WAAW;IACX,kBAAa,GAAbC,aAAa;IALR,QAAG,GAAGL,WAAW,CAACM,MAAM,GAAG,QAAQ;EAMhD;EAEJC,UAAU,CAACC,OAAsB;IAC7B,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAO,IAAI,CAACC,GAAG,EAAEF,OAAO,CAAC,CAACG,IAAI,CAC9Cb,GAAG,CAAEc,IAAU,IAAI;MACf;MACA;MACA,IAAI,CAACP,aAAa,CAACQ,WAAW,CAAC,4BAA4B,CAAC;IAChE,CAAC,CAAC,EACFd,UAAU,CAACe,GAAG,IAAG;MACb,IAAI,CAACT,aAAa,CAACU,SAAS,CAACD,GAAG,CAACE,KAAK,CAACC,OAAO,CAAC;MAC/C,OAAOpB,UAAU,CAACiB,GAAG,CAAC;IAC1B,CAAC,CAAC,CACL;EACL;EAEAI,cAAc,CAACC,WAA8B;IACzC,OAAO,IAAI,CAAChB,IAAI,CAACM,GAAG,CAAO,IAAI,CAACC,GAAG,GAAG,UAAU,EAAES,WAAW,CAAC,CAACR,IAAI,CAC/Db,GAAG,CAAC,MAAM,IAAI,CAACO,aAAa,CAACQ,WAAW,CAAC,gCAAgC,CAAC,CAAC,EAC3Ed,UAAU,CAACe,GAAG,IAAG;MACb,IAAI,CAACT,aAAa,CAACU,SAAS,CAACD,GAAG,CAACE,KAAK,CAACC,OAAO,CAAC;MAC/C,OAAOpB,UAAU,CAACiB,GAAG,CAAC;IAC1B,CAAC,CAAC,CACL;EACL;;AA/BSb,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAmB,SAAXnB,WAAW;EAAAoB,YAFR;AAAM","names":["throwError","map","catchError","environment","UserService","constructor","http","authService","notifyService","apiUrl","updateUser","userDto","put","url","pipe","user","showSuccess","err","showError","error","message","updatePassword","passwordDto","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\user\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { environment } from 'src/environments/environment';\nimport { AuthService } from 'src/app/modules/auth/auth.service';\nimport { NotifyService } from 'src/app/shared/services/notify.service';\nimport { User } from './user.model';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UpdatePasswordDto } from './dto/update-password.dto';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserService {\n    private readonly url = environment.apiUrl + 'users/';\n\n    constructor(\n        private http: HttpClient,\n        private authService: AuthService,\n        private notifyService: NotifyService,\n    ) { }\n\n    updateUser(userDto: UpdateUserDto): Observable<void> {\n        return this.http.put<User>(this.url, userDto).pipe(\n            map((user: User) => {\n                // const status = this.authService.getStatus();\n                // this.authService.setCurrentUser({ ...user, token });\n                this.notifyService.showSuccess('User successfully updated!')\n            }),\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n\n    updatePassword(passwordDto: UpdatePasswordDto): Observable<void> {\n        return this.http.put<void>(this.url + 'password', passwordDto).pipe(\n            map(() => this.notifyService.showSuccess('Password successfully updated!')),\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}