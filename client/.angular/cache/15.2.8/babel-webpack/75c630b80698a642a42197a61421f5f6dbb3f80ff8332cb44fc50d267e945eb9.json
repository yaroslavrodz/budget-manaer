{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction UpdateOperationModalComponent_div_11_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateOperationModalComponent_div_11_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Only latin characters and numbers allowed\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateOperationModalComponent_div_11_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Min length equals to 4 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateOperationModalComponent_div_11_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Max length equals to 12 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateOperationModalComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtemplate(1, UpdateOperationModalComponent_div_11_div_1_Template, 2, 0, \"div\", 18);\n    i0.ɵɵtemplate(2, UpdateOperationModalComponent_div_11_div_2_Template, 2, 0, \"div\", 18);\n    i0.ɵɵtemplate(3, UpdateOperationModalComponent_div_11_div_3_Template, 2, 0, \"div\", 18);\n    i0.ɵɵtemplate(4, UpdateOperationModalComponent_div_11_div_4_Template, 2, 0, \"div\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(10);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r1 == null ? null : _r1.errors == null ? null : _r1.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r1 == null ? null : _r1.errors == null ? null : _r1.errors[\"pattern\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r1 == null ? null : _r1.errors == null ? null : _r1.errors[\"minlength\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r1 == null ? null : _r1.errors == null ? null : _r1.errors[\"maxlength\"]);\n  }\n}\nfunction UpdateOperationModalComponent_div_17_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateOperationModalComponent_div_17_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Only numbers allowed\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateOperationModalComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtemplate(1, UpdateOperationModalComponent_div_17_div_1_Template, 2, 0, \"div\", 18);\n    i0.ɵɵtemplate(2, UpdateOperationModalComponent_div_17_div_2_Template, 2, 0, \"div\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r3 = i0.ɵɵreference(16);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r3 == null ? null : _r3.errors == null ? null : _r3.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r3 == null ? null : _r3.errors == null ? null : _r3.errors[\"pattern\"]);\n  }\n}\nfunction UpdateOperationModalComponent_option_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r14 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", type_r14);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", type_r14, \" \");\n  }\n}\nfunction UpdateOperationModalComponent_option_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", category_r15);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", category_r15.name, \" \");\n  }\n}\nfunction UpdateOperationModalComponent_option_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const saving_r16 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", saving_r16);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", saving_r16.name, \" \");\n  }\n}\nexport class UpdateOperationModalComponent {\n  constructor() {\n    this.types = [];\n    this.categories = [];\n    this.savings = [];\n    this.operationToUpdate = new EventEmitter();\n    this.close = new EventEmitter();\n    this.form = new FormGroup({\n      name: new FormControl('', Validators.compose([Validators.required, Validators.minLength(2), Validators.maxLength(12), Validators.pattern('^[a-zA-Z0-9]+$')])),\n      type: new FormControl('', Validators.compose([Validators.required])),\n      amount: new FormControl('', Validators.compose([Validators.required, Validators.pattern('^[0-9]+([.]{1}[0-9]{1,2})?$')])),\n      categoryId: new FormControl('', Validators.compose([Validators.required])),\n      savingId: new FormControl('', Validators.compose([Validators.required]))\n    });\n  }\n  update() {\n    this.operationToUpdate.emit({\n      id: this.operation.id,\n      userId: this.operation.userId,\n      ...this.form.value\n    });\n    this.close.emit();\n  }\n  cancel() {\n    this.close.emit();\n  }\n  ngOnInit() {}\n}\nUpdateOperationModalComponent.ɵfac = function UpdateOperationModalComponent_Factory(t) {\n  return new (t || UpdateOperationModalComponent)();\n};\nUpdateOperationModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdateOperationModalComponent,\n  selectors: [[\"app-update-operation-modal\"]],\n  inputs: {\n    operation: \"operation\",\n    types: \"types\",\n    categories: \"categories\",\n    savings: \"savings\"\n  },\n  outputs: {\n    operationToUpdate: \"operationToUpdate\",\n    close: \"close\"\n  },\n  decls: 37,\n  vars: 11,\n  consts: [[1, \"modal\"], [1, \"modal-content\"], [3, \"ngSubmit\"], [\"updateOperationForm\", \"ngForm\"], [1, \"input-group\"], [\"type\", \"text\", \"name\", \"name\", \"required\", \"\", \"minlength\", \"2\", \"maxlength\", \"12\", \"pattern\", \"^[a-zA-Z0-9]+$\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"ngModel\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"type\", \"text\", \"name\", \"amount\", \"required\", \"\", \"pattern\", \"^[0-9]+([.]{1}[0-9]{1,2})?$\", 3, \"ngModel\", \"ngModelChange\"], [\"amount\", \"ngModel\"], [\"name\", \"type\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"name\", \"category\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"name\", \"saving\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 3, \"disabled\"], [3, \"click\"], [1, \"error-message\"], [4, \"ngIf\"], [3, \"value\"], [3, \"ngValue\"]],\n  template: function UpdateOperationModalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\");\n      i0.ɵɵtext(3, \"Update operation\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 2, 3);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdateOperationModalComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.update();\n      });\n      i0.ɵɵelementStart(6, \"div\", 4)(7, \"label\");\n      i0.ɵɵtext(8, \"Name: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 5, 6);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdateOperationModalComponent_Template_input_ngModelChange_9_listener($event) {\n        return ctx.operation.name = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, UpdateOperationModalComponent_div_11_Template, 5, 4, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 4)(13, \"label\");\n      i0.ɵɵtext(14, \"Amount: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"input\", 8, 9);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdateOperationModalComponent_Template_input_ngModelChange_15_listener($event) {\n        return ctx.operation.amount = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(17, UpdateOperationModalComponent_div_17_Template, 3, 2, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 4)(19, \"label\");\n      i0.ɵɵtext(20, \"Type: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"select\", 10);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdateOperationModalComponent_Template_select_ngModelChange_21_listener($event) {\n        return ctx.operation.type = $event;\n      });\n      i0.ɵɵtemplate(22, UpdateOperationModalComponent_option_22_Template, 2, 2, \"option\", 11);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(23, \"div\", 4)(24, \"label\");\n      i0.ɵɵtext(25, \"Category: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"select\", 12);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdateOperationModalComponent_Template_select_ngModelChange_26_listener($event) {\n        return ctx.operation.category = $event;\n      });\n      i0.ɵɵtemplate(27, UpdateOperationModalComponent_option_27_Template, 2, 2, \"option\", 13);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(28, \"div\", 4)(29, \"label\");\n      i0.ɵɵtext(30, \"Saving: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(31, \"select\", 14);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdateOperationModalComponent_Template_select_ngModelChange_31_listener($event) {\n        return ctx.operation.saving = $event;\n      });\n      i0.ɵɵtemplate(32, UpdateOperationModalComponent_option_32_Template, 2, 2, \"option\", 13);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(33, \"button\", 15);\n      i0.ɵɵtext(34, \" Update \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"button\", 16);\n      i0.ɵɵlistener(\"click\", function UpdateOperationModalComponent_Template_button_click_35_listener() {\n        return ctx.cancel();\n      });\n      i0.ɵɵtext(36, \"Cancel\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(5);\n      const _r1 = i0.ɵɵreference(10);\n      const _r3 = i0.ɵɵreference(16);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngModel\", ctx.operation.name);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", (_r1 == null ? null : _r1.invalid) && (_r1 == null ? null : _r1.dirty));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.operation.amount);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", (_r3 == null ? null : _r3.invalid) && (_r3 == null ? null : _r3.dirty));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.operation.type);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.types);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.operation.category);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.categories);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.operation.saving);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.savings);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", _r0.invalid);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.MinLengthValidator, i2.MaxLengthValidator, i2.PatternValidator, i2.NgModel, i2.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","FormControl","FormGroup","Validators","i0","UpdateOperationModalComponent","constructor","name","compose","required","minLength","maxLength","pattern","type","amount","categoryId","savingId","update","operationToUpdate","emit","id","operation","userId","form","value","close","cancel","ngOnInit","selectors","inputs","types","categories","savings","outputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\operations\\components\\update-operation-modal\\update-operation-modal.component.ts","C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\operations\\components\\update-operation-modal\\update-operation-modal.component.html"],"sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Operation } from '../../operation.model';\nimport { Category } from 'src/app/modules/categories/category.model';\nimport { Saving } from 'src/app/modules/savings/saving.model';\nimport { OperationType } from '../../enums/operation-type.enum';\nimport { UpdateOperation } from '../../interfaces/update-operation.interface';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'app-update-operation-modal',\n    templateUrl: './update-operation-modal.component.html',\n    styleUrls: ['./update-operation-modal.component.scss']\n})\nexport class UpdateOperationModalComponent implements OnInit {\n    @Input() operation: Operation;\n    @Input() types: OperationType[] = [];\n    @Input() categories: Category[] = [];\n    @Input() savings: Saving[] = [];\n    @Output() operationToUpdate = new EventEmitter<UpdateOperation>();\n    @Output() close = new EventEmitter<void>();\n    \n    form = new FormGroup({\n        name: new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.minLength(2),\n            Validators.maxLength(12),\n            Validators.pattern('^[a-zA-Z0-9]+$'),\n        ])),\n        type: new FormControl('', Validators.compose([\n            Validators.required,\n        ])),\n        amount: new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.pattern('^[0-9]+([.]{1}[0-9]{1,2})?$'),\n        ])),\n        categoryId: new FormControl('', Validators.compose([\n            Validators.required,\n        ])),\n        savingId: new FormControl('', Validators.compose([\n            Validators.required,\n        ]))\n    });\n   \n\n    constructor() {}\n\n    update() {\n        this.operationToUpdate.emit({\n            id: this.operation.id,\n            userId: this.operation.userId,\n            ...this.form.value\n        });\n        this.close.emit();\n    }\n\n    cancel() {\n        this.close.emit();\n    }\n\n    ngOnInit() {\n    }\n}","<div class=\"modal\">\n    <div class=\"modal-content\">\n        <h2>Update operation</h2>\n\n        <form #updateOperationForm=\"ngForm\" (ngSubmit)=\"update()\">\n            <div class=\"input-group\">\n                <label>Name: </label>\n\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    [(ngModel)]=\"operation.name\"\n                    #name=\"ngModel\"\n                    required\n                    minlength=\"2\"\n                    maxlength=\"12\"\n                    pattern=\"^[a-zA-Z0-9]+$\">\n\n                <div\n                    *ngIf=\"name?.invalid && name?.dirty\"\n                    class=\"error-message\">\n\n                    <div *ngIf=\"name?.errors?.['required']\">Required</div>\n                    <div *ngIf=\"name?.errors?.['pattern']\">Only latin characters and numbers allowed</div>\n                    <div *ngIf=\"name?.errors?.['minlength']\">Min length equals to 4 characters</div>\n                    <div *ngIf=\"name?.errors?.['maxlength']\">Max length equals to 12 characters</div>\n                </div>\n            </div>\n    \n            <div class=\"input-group\">\n                <label>Amount: </label>\n\n                <input\n                    type=\"text\"\n                    name=\"amount\"\n                    [(ngModel)]=\"operation.amount\"\n                    #amount=\"ngModel\"\n                    required\n                    pattern=\"^[0-9]+([.]{1}[0-9]{1,2})?$\">\n\n                <div \n                    *ngIf=\"amount?.invalid && amount?.dirty\"\n                    class=\"error-message\">\n\n                    <div *ngIf=\"amount?.errors?.['required']\">Required</div>\n                    <div *ngIf=\"amount?.errors?.['pattern']\">Only numbers allowed</div>\n                </div>\n            </div>\n            \n            \n            <div class=\"input-group\">\n                <label>Type: </label>\n\n                <select name=\"type\" [(ngModel)]=\"operation.type\" required>\n                    <option\n                        *ngFor=\"let type of types\"\n                        value=\"{{ type }}\">\n                        {{ type }}\n                    </option>\n                </select>\n            </div>\n\n            <div class=\"input-group\">\n                <label>Category: </label>\n\n                <select name=\"category\" [(ngModel)]=\"operation.category\" required>\n                    <option\n                        *ngFor=\"let category of categories\"\n                        [ngValue]=\"category\">\n                        {{ category.name }}\n                    </option>\n                </select>\n            </div>\n    \n            <div class=\"input-group\">\n                <label>Saving: </label>\n\n                <select name=\"saving\" [(ngModel)]=\"operation.saving\" required>\n                    <option\n                        *ngFor=\"let saving of savings\"\n                        [ngValue]=\"saving\">\n                        {{ saving.name }}\n                    </option>\n                </select>\n            </div>\n\n            <button\n                type=\"submit\"\n                [disabled]=\"updateOperationForm.invalid\">\n                Update\n            </button>\n\n            <button (click)=\"cancel()\">Cancel</button>\n        </form>\n    </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}