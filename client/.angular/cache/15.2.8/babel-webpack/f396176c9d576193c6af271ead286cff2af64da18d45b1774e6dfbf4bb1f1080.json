{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/modules/savings/saving.service\";\nimport * as i4 from \"src/app/shared/services/notify.service\";\nexport class AuthService {\n  constructor(http, router, savingService, notifyService) {\n    this.http = http;\n    this.router = router;\n    this.savingService = savingService;\n    this.notifyService = notifyService;\n    this.url = environment.apiUrl + 'auth/';\n    this.currentUserKey = 'currentUser';\n    this.currentUser$ = new BehaviorSubject(JSON.parse(localStorage.getItem(this.currentUserKey)));\n  }\n  get currentUser() {\n    return this.currentUser$.getValue();\n  }\n  setCurrentUser(user) {\n    localStorage.setItem(this.currentUserKey, JSON.stringify(user));\n    this.currentUser$.next(user);\n  }\n  login(loginDto) {\n    return this.http.post(this.url + 'login', loginDto).pipe(map(user => {\n      this.setCurrentUser(user);\n      this.savingService.getBalance().subscribe();\n      this.notifyService.showSuccess('Logged in!');\n      this.router.navigate(['/operations']);\n    }), catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n  logout() {\n    localStorage.removeItem(this.currentUserKey);\n    this.currentUser$.next(null);\n    this.savingService.balance$.next(null);\n    this.router.navigate(['/auth']);\n  }\n  register(registrationDto) {\n    return this.http.post(this.url + 'register', registrationDto).pipe(map(user => {\n      this.setCurrentUser(user);\n      this.savingService.getBalance().subscribe();\n      this.notifyService.showSuccess('Account successfully registrated!');\n      this.router.navigate(['/operations']);\n    }), catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.SavingService), i0.ɵɵinject(i4.NotifyService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","throwError","catchError","map","environment","AuthService","constructor","http","router","savingService","notifyService","apiUrl","JSON","parse","localStorage","getItem","currentUserKey","currentUser","currentUser$","getValue","setCurrentUser","user","setItem","stringify","next","login","loginDto","post","url","pipe","getBalance","subscribe","showSuccess","navigate","err","showError","error","message","logout","removeItem","balance$","register","registrationDto","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\nimport { environment } from 'src/environments/environment'; \nimport { SavingService } from 'src/app/modules/savings/saving.service';\nimport { NotifyService } from 'src/app/shared/services/notify.service';\nimport { RegistrationDto } from './dto/registration.dto';\nimport { LoginDto } from './dto/login.dto';\nimport { User } from 'src/app/modules/user/user.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n    private readonly url = environment.apiUrl + 'auth/';\n    private readonly currentUserKey = 'currentUser';\n    currentUser$: BehaviorSubject<User | null> = \n        new BehaviorSubject<User | null>(JSON.parse(localStorage.getItem(this.currentUserKey)!));;\n\n    constructor(\n        private http: HttpClient,\n        private router: Router,\n        private savingService: SavingService,\n        private notifyService: NotifyService,\n    ) { }\n\n    get currentUser(): User | null {\n        return this.currentUser$.getValue();\n    }\n\n    setCurrentUser(user: User | null): void {\n        localStorage.setItem(this.currentUserKey, JSON.stringify(user));\n        this.currentUser$.next(user);\n    }\n\n    login(loginDto: LoginDto): Observable<void> {\n        return this.http.post<User>(this.url + 'login', loginDto).pipe(\n            map(user => {\n                this.setCurrentUser(user);\n                this.savingService.getBalance().subscribe();\n                this.notifyService.showSuccess('Logged in!');\n                this.router.navigate(['/operations']);\n            }),\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n\n    logout(): void {\n        localStorage.removeItem(this.currentUserKey);\n        this.currentUser$.next(null);\n        this.savingService.balance$.next(null);\n        this.router.navigate(['/auth']);\n    }\n\n    register(registrationDto: RegistrationDto): Observable<void> { \n        return this.http.post<User>(this.url + 'register', registrationDto).pipe(\n            map(user => {\n                this.setCurrentUser(user);\n                this.savingService.getBalance().subscribe();\n                this.notifyService.showSuccess('Account successfully registrated!');\n                this.router.navigate(['/operations']);\n            }),\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}