{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/modules/savings/savings.service\";\nimport * as i4 from \"src/app/shared/services/notify.service\";\nexport class AuthService {\n  constructor(http, router, savingsService, notifyService) {\n    this.http = http;\n    this.router = router;\n    this.savingsService = savingsService;\n    this.notifyService = notifyService;\n    this.url = environment.apiUrl + 'auth/';\n    this.stasusKey = 'status';\n    this.status$ = new BehaviorSubject(this.getStatusFromStorage());\n  }\n  getStatusFromStorage() {\n    const status = localStorage.getItem(this.stasusKey);\n    if (!status) {\n      return null;\n    }\n    return JSON.parse(status);\n  }\n  getStatus() {\n    return this.status$.getValue();\n  }\n  setStatus(status) {\n    localStorage.setItem(this.stasusKey, JSON.stringify(status));\n    this.status$.next(status);\n  }\n  login(login) {\n    return this.http.post(this.url + 'login', login).pipe(map(status => {\n      this.setStatus(status);\n      this.savingsService.getBalance().subscribe();\n      this.notifyService.showSuccess('Logged in');\n      this.router.navigate(['/operations']);\n    }), catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n  logout() {\n    this.setStatus(null);\n    this.savingsService.balance$.next(null);\n    this.router.navigate(['/auth']);\n  }\n  register(register) {\n    return this.http.post(this.url + 'register', register).pipe(map(status => {\n      this.setStatus(status);\n      this.savingsService.getBalance().subscribe();\n      this.notifyService.showSuccess('Account successfully registrated');\n      this.router.navigate(['/operations']);\n    }), catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.SavingsService), i0.ɵɵinject(i4.NotifyService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","catchError","map","environment","AuthService","constructor","http","router","savingsService","notifyService","apiUrl","getStatusFromStorage","status","localStorage","getItem","stasusKey","JSON","parse","getStatus","status$","getValue","setStatus","setItem","stringify","next","login","post","url","pipe","getBalance","subscribe","showSuccess","navigate","error","showError","message","logout","balance$","register","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\nimport { environment } from 'src/environments/environment'; \nimport { SavingsService } from 'src/app/modules/savings/savings.service';\nimport { NotifyService } from 'src/app/shared/services/notify.service';\nimport { User } from 'src/app/modules/user/user.model';\nimport { Status } from './interfaces/status.interface';\nimport { Login } from './interfaces/login.interface';\nimport { Register } from './interfaces/register.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n    private readonly url = environment.apiUrl + 'auth/';\n    private readonly stasusKey = 'status';\n    status$: BehaviorSubject<Status | null> = \n        new BehaviorSubject<Status | null>(this.getStatusFromStorage());;\n\n    constructor(\n        private http: HttpClient,\n        private router: Router,\n        private savingsService: SavingsService,\n        private notifyService: NotifyService,\n    ) { }\n\n    getStatusFromStorage(): Status | null {\n        const status = localStorage.getItem(this.stasusKey);\n        if (!status) {\n            return null;\n        }\n        return JSON.parse(status);\n    }\n\n    getStatus(): Status | null {\n        return this.status$.getValue();\n    }\n\n    setStatus(status: Status | null) {\n        localStorage.setItem(this.stasusKey, JSON.stringify(status));\n        this.status$.next(status);\n    }\n\n    login(login: Login): Observable<void> {\n        return this.http.post<Status>(this.url + 'login', login).pipe(\n            map(status => {\n                this.setStatus(status);\n                this.savingsService.getBalance().subscribe();\n                this.notifyService.showSuccess('Logged in');\n                this.router.navigate(['/operations']);\n            }),\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error;\n            })\n        );\n    }\n\n    logout() {\n        this.setStatus(null);\n        this.savingsService.balance$.next(null);\n        this.router.navigate(['/auth']);\n    }\n\n    register(register: Register): Observable<void> { \n        return this.http.post<{ user: User, token: string }>(this.url + 'register', register).pipe(\n            map(status => {\n                this.setStatus(status);\n                this.savingsService.getBalance().subscribe();\n                this.notifyService.showSuccess('Account successfully registrated');\n                this.router.navigate(['/operations']);\n            }),\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error;\n            })\n        );\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}