{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/notify.service\";\nexport class CategoriesService {\n  constructor(http, notifyService) {\n    this.http = http;\n    this.notifyService = notifyService;\n    this.url = environment.apiUrl + 'categories/';\n  }\n  create(category) {\n    return this.http.post(this.url, category).pipe(map(category => {\n      this.notifyService.showSuccess('Category successfully created');\n      return category;\n    }), catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n  findAll(options) {\n    return this.http.get(this.url, {\n      params: {\n        ...options\n      }\n    }).pipe(catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n  update(category) {\n    return this.http.put(this.url, category).pipe(map(() => this.notifyService.showSuccess('Category successfully updated')), catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n  delete(id) {\n    return this.http.delete(this.url, {\n      params: {\n        id\n      }\n    }).pipe(map(() => this.notifyService.showSuccess('Category successfully deleted')), catchError(error => {\n      this.notifyService.showError(error.error.message);\n      throw error;\n    }));\n  }\n}\nCategoriesService.ɵfac = function CategoriesService_Factory(t) {\n  return new (t || CategoriesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotifyService));\n};\nCategoriesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CategoriesService,\n  factory: CategoriesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,8BAA8B;;;;AAU1D,OAAM,MAAOC,iBAAiB;EAG1BC,YACYC,IAAgB,EAChBC,aAA4B;IAD5B,SAAI,GAAJD,IAAI;IACJ,kBAAa,GAAbC,aAAa;IAJR,QAAG,GAAGJ,WAAW,CAACK,MAAM,GAAG,aAAa;EAKrD;EAEJC,MAAM,CAACC,QAAwB;IAC3B,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAW,IAAI,CAACC,GAAG,EAAEF,QAAQ,CAAC,CAACG,IAAI,CACpDX,GAAG,CAACQ,QAAQ,IAAG;MACX,IAAI,CAACH,aAAa,CAACO,WAAW,CAAC,+BAA+B,CAAC;MAC/D,OAAOJ,QAAQ;IACnB,CAAC,CAAC,EACFT,UAAU,CAACc,KAAK,IAAG;MACf,IAAI,CAACR,aAAa,CAACS,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MACjD,MAAMF,KAAK;IACf,CAAC,CAAC,CACL;EACL;EAEAG,OAAO,CAACC,OAAuB;IAC3B,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAsC,IAAI,CAACR,GAAG,EAAE;MAChES,MAAM,EAAE;QAAE,GAAGF;MAAO;KACvB,CAAC,CAACN,IAAI,CACHZ,UAAU,CAACc,KAAK,IAAG;MACf,IAAI,CAACR,aAAa,CAACS,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MACjD,MAAMF,KAAK;IACf,CAAC,CAAC,CACL;EACL;EAEAO,MAAM,CAACZ,QAAwB;IAC3B,OAAO,IAAI,CAACJ,IAAI,CAACiB,GAAG,CAAO,IAAI,CAACX,GAAG,EAAEF,QAAQ,CAAC,CAACG,IAAI,CAC/CX,GAAG,CAAC,MAAM,IAAI,CAACK,aAAa,CAACO,WAAW,CAAC,+BAA+B,CAAC,CAAC,EAC1Eb,UAAU,CAACc,KAAK,IAAG;MACf,IAAI,CAACR,aAAa,CAACS,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MACjD,MAAMF,KAAK;IACf,CAAC,CAAC,CACL;EACL;EAEAS,MAAM,CAACC,EAAU;IACb,OAAO,IAAI,CAACnB,IAAI,CAACkB,MAAM,CAAO,IAAI,CAACZ,GAAG,EAAE;MACpCS,MAAM,EAAE;QAAEI;MAAE;KACf,CAAC,CAACZ,IAAI,CACHX,GAAG,CAAC,MAAM,IAAI,CAACK,aAAa,CAACO,WAAW,CAAC,+BAA+B,CAAC,CAAC,EAC1Eb,UAAU,CAACc,KAAK,IAAG;MACf,IAAI,CAACR,aAAa,CAACS,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MACjD,MAAMF,KAAK;IACf,CAAC,CAAC,CACL;EACL;;AApDSX,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAsB,SAAjBtB,iBAAiB;EAAAuB,YAFd;AAAM","names":["catchError","map","environment","CategoriesService","constructor","http","notifyService","apiUrl","create","category","post","url","pipe","showSuccess","error","showError","message","findAll","options","get","params","update","put","delete","id","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\categories\\categories.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { environment } from 'src/environments/environment'; \nimport { NotifyService } from 'src/app/shared/services/notify.service';\nimport { Category } from './interfaces/category.interface';\nimport { CreateCategory } from './interfaces/create-category.interface';\nimport { FindCategories } from './interfaces/find-categories.interface';\nimport { UpdateCategory } from './interfaces/update-category.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CategoriesService {\n    private readonly url = environment.apiUrl + 'categories/';\n    \n    constructor(\n        private http: HttpClient,\n        private notifyService: NotifyService,\n    ) { }\n\n    create(category: CreateCategory): Observable<Category> {\n        return this.http.post<Category>(this.url, category).pipe(\n            map(category => {\n                this.notifyService.showSuccess('Category successfully created');\n                return category;\n            }),\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error;\n            })\n        );\n    }\n\n    findAll(options: FindCategories): Observable<{ count: number, rows: Category[] }> {\n        return this.http.get<{ count: number, rows: Category[] }>(this.url, {\n            params: { ...options }\n        }).pipe(\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error;\n            })\n        );\n    }\n\n    update(category: UpdateCategory): Observable<void> {\n        return this.http.put<void>(this.url, category).pipe(\n            map(() => this.notifyService.showSuccess('Category successfully updated')),\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error;\n            })\n        );\n    }\n\n    delete(id: number): Observable<void> {\n        return this.http.delete<void>(this.url, {\n            params: { id }\n        }).pipe(\n            map(() => this.notifyService.showSuccess('Category successfully deleted')),\n            catchError(error => {\n                this.notifyService.showError(error.error.message);\n                throw error;\n            })\n        );\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}