{"ast":null,"code":"import { Validators, FormControl, FormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../auth.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction LoginComponent_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_5_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Only latin characters and numbers allowed\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_5_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Min length equals to 4 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_5_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Max length equals to 12 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, LoginComponent_div_5_div_1_Template, 2, 0, \"div\", 7);\n    i0.ɵɵtemplate(2, LoginComponent_div_5_div_2_Template, 2, 0, \"div\", 7);\n    i0.ɵɵtemplate(3, LoginComponent_div_5_div_3_Template, 2, 0, \"div\", 7);\n    i0.ɵɵtemplate(4, LoginComponent_div_5_div_4_Template, 2, 0, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.username == null ? null : ctx_r0.username.errors == null ? null : ctx_r0.username.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.username == null ? null : ctx_r0.username.errors == null ? null : ctx_r0.username.errors[\"pattern\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.username == null ? null : ctx_r0.username.errors == null ? null : ctx_r0.username.errors[\"minlength\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.username == null ? null : ctx_r0.username.errors == null ? null : ctx_r0.username.errors[\"maxlength\"]);\n  }\n}\nfunction LoginComponent_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, LoginComponent_div_10_div_1_Template, 2, 0, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.password == null ? null : ctx_r1.password.errors == null ? null : ctx_r1.password.errors.required);\n  }\n}\nexport class LoginComponent {\n  get username() {\n    return this.loginForm.get('username');\n  }\n  get password() {\n    return this.loginForm.get('password');\n  }\n  constructor(authService) {\n    this.authService = authService;\n    this.loginForm = new FormGroup({\n      username: new FormControl('', Validators.compose([Validators.required, Validators.minLength(2), Validators.maxLength(12), Validators.pattern('^[a-zA-Z0-9]+$')])),\n      password: new FormControl('', Validators.required)\n    });\n  }\n  login() {\n    this.authService.login(this.loginForm.value).subscribe(null, err => console.error(err.error.message));\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 13,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"input-group\"], [\"type\", \"text\", \"placeholder\", \"Username\", \"formControlName\", \"username\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"type\", \"password\", \"placeholder\", \"Password\", \"formControlName\", \"password\"], [\"type\", \"submit\", 1, \"light\", 3, \"disabled\"], [1, \"error-message\"], [4, \"ngIf\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.login();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\");\n      i0.ɵɵtext(3, \"Username: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵtemplate(5, LoginComponent_div_5_Template, 5, 4, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 1)(7, \"label\");\n      i0.ɵɵtext(8, \"Password: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 4);\n      i0.ɵɵtemplate(10, LoginComponent_div_10_Template, 2, 1, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 5);\n      i0.ɵɵtext(12, \" Login \");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.username == null ? null : ctx.username.invalid) && (ctx.username == null ? null : ctx.username.dirty));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.password == null ? null : ctx.password.invalid) && (ctx.password == null ? null : ctx.password.dirty));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\"button[_ngcontent-%COMP%] {\\n  margin-bottom: 5px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9kdWxlcy9hdXRoL2NvbXBvbmVudHMvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi8uLi8uLi8lRDAlQTAlRDAlQjAlRDAlQjElRDAlQkUlRDElODclRDAlQjglRDAlQjklMjAlRDElODElRDElODIlRDAlQkUlRDAlQkIvJUQwJTlEJUQwJUJFJUQwJUIyJUQwJUIwJUQxJThGJTIwJUQwJUJGJUQwJUIwJUQwJUJGJUQwJUJBJUQwJUIwJTIwKDgpL2NsaWVudC9zcmMvYXBwL21vZHVsZXMvYXV0aC9jb21wb25lbnRzL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksa0JBQUE7QUNDSiIsInNvdXJjZXNDb250ZW50IjpbImJ1dHRvbiB7XG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xufSIsImJ1dHRvbiB7XG4gIG1hcmdpbi1ib3R0b206IDVweDtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,UAAU,EAAEC,WAAW,EAAEC,SAAS,QAAQ,gBAAgB;;;;;;;ICYvDC,2BAA4C;IAAAA,wBAAQ;IAAAA,iBAAM;;;;;IAC1DA,2BAA2C;IAAAA,yDAAyC;IAAAA,iBAAM;;;;;IAC1FA,2BAA6C;IAAAA,iDAAiC;IAAAA,iBAAM;;;;;IACpFA,2BAA6C;IAAAA,kDAAkC;IAAAA,iBAAM;;;;;IAPzFA,8BAE0B;IAEtBA,qEAA0D;IAC1DA,qEAA0F;IAC1FA,qEAAoF;IACpFA,qEAAqF;IACzFA,iBAAM;;;;IAJIA,eAAoC;IAApCA,kIAAoC;IACpCA,eAAmC;IAAnCA,iIAAmC;IACnCA,eAAqC;IAArCA,mIAAqC;IACrCA,eAAqC;IAArCA,mIAAqC;;;;;IAgB3CA,2BAAwC;IAAAA,wBAAQ;IAAAA,iBAAM;;;;;IAJ1DA,8BAE0B;IAEtBA,sEAAsD;IAC1DA,iBAAM;;;;IADIA,eAAgC;IAAhCA,+HAAgC;;;ADrBlD,OAAM,MAAOC,cAAc;EAWvB,IAAIC,QAAQ;IAAK,OAAO,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,UAAU,CAAC;EAAE;EACxD,IAAIC,QAAQ;IAAK,OAAO,IAAI,CAACF,SAAS,CAACC,GAAG,CAAC,UAAU,CAAC;EAAE;EAExDE,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAb/B,cAAS,GAAG,IAAIR,SAAS,CAAC;MACtBG,QAAQ,EAAE,IAAIJ,WAAW,CAAC,EAAE,EAAED,UAAU,CAACW,OAAO,CAAC,CAC7CX,UAAU,CAACY,QAAQ,EACnBZ,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,EACvBb,UAAU,CAACc,SAAS,CAAC,EAAE,CAAC,EACxBd,UAAU,CAACe,OAAO,CAAC,gBAAgB,CAAC,CACvC,CAAC,CAAC;MACHP,QAAQ,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAED,UAAU,CAACY,QAAQ;KACpD,CAAC;EAK8C;EAEhDI,KAAK;IACD,IAAI,CAACN,WAAW,CAACM,KAAK,CAAC,IAAI,CAACV,SAAS,CAACW,KAAiB,CAAC,CAACC,SAAS,CAC9D,IAAI,EACJC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAACE,KAAK,CAACC,OAAO,CAAC,CAC1C;EACL;;AArBSlB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAmB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX3BxB,+BAAmD;MAArBA;QAAA,OAAYyB,WAAO;MAAA,EAAC;MAC9CzB,8BAAyB;MACdA,0BAAU;MAAAA,iBAAQ;MAEzBA,2BAG+B;MAE/BA,+DAQM;MACVA,iBAAM;MAENA,8BAAyB;MACdA,0BAAU;MAAAA,iBAAQ;MAEzBA,2BAG+B;MAE/BA,iEAKM;MACVA,iBAAM;MAENA,kCAGmC;MAC/BA,wBACJ;MAAAA,iBAAS;;;MAzCPA,yCAAuB;MAUhBA,eAA0C;MAA1CA,iIAA0C;MAmB1CA,eAA0C;MAA1CA,iIAA0C;MAU/CA,eAA8B;MAA9BA,gDAA8B","names":["Validators","FormControl","FormGroup","i0","LoginComponent","username","loginForm","get","password","constructor","authService","compose","required","minLength","maxLength","pattern","login","value","subscribe","err","console","error","message","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\auth\\components\\login\\login.component.ts","C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\auth\\components\\login\\login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Validators, FormControl, FormGroup } from '@angular/forms';\n\nimport { AuthService } from '../../auth.service';\nimport { LoginDto } from '../../dto/login.dto';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent {\n    loginForm = new FormGroup({\n        username: new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.minLength(2),\n            Validators.maxLength(12),\n            Validators.pattern('^[a-zA-Z0-9]+$'),\n        ])),\n        password: new FormControl('', Validators.required)\n    });\n\n    get username() { return this.loginForm.get('username'); }\n    get password() { return this.loginForm.get('password'); }\n\n    constructor(private authService: AuthService) { }\n\n    login(): void {\n        this.authService.login(this.loginForm.value as LoginDto).subscribe(\n            null,\n            err => console.error(err.error.message)\n        );\n    }\n}\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n    <div class=\"input-group\">\n        <label>Username: </label>\n        \n        <input\n            type=\"text\"\n            placeholder=\"Username\"\n            formControlName=\"username\">\n\n        <div \n            *ngIf=\"username?.invalid && username?.dirty\"\n            class=\"error-message\">\n\n            <div *ngIf=\"username?.errors?.['required']\">Required</div>\n            <div *ngIf=\"username?.errors?.['pattern']\">Only latin characters and numbers allowed</div>\n            <div *ngIf=\"username?.errors?.['minlength']\">Min length equals to 4 characters</div>\n            <div *ngIf=\"username?.errors?.['maxlength']\">Max length equals to 12 characters</div>\n        </div>\n    </div>\n\n    <div class=\"input-group\">\n        <label>Password: </label>\n\n        <input\n            type=\"password\"\n            placeholder=\"Password\"\n            formControlName=\"password\">\n\n        <div \n            *ngIf=\"password?.invalid && password?.dirty\"\n            class=\"error-message\">\n\n            <div *ngIf=\"password?.errors?.required\">Required</div>\n        </div>\n    </div>\n    \n    <button\n        type=\"submit\"\n        class=\"light\"\n        [disabled]=\"loginForm.invalid\">\n        Login\n    </button>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}