{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../savings/saving.service\";\nimport * as i3 from \"src/app/shared/services/notify.service\";\nimport * as i4 from \"src/app/shared/pipes/remove-null-values.pipe\";\nexport class OperationService {\n  constructor(http, savingService, notifyService, removeNullValuesPipe) {\n    this.http = http;\n    this.savingService = savingService;\n    this.notifyService = notifyService;\n    this.removeNullValuesPipe = removeNullValuesPipe;\n    this.url = environment.apiUrl + 'operations/';\n  }\n  create(dto) {\n    return this.http.post(this.url, dto).pipe(map(operation => {\n      this.notifyService.showSuccess('Operation successfully created!');\n      this.savingService.getBalance().subscribe();\n      return operation;\n    }), catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n  get(dto) {\n    return this.http.get(this.url, {\n      params: {\n        ppage: 1,\n        limit: 100,\n        filter: {}\n      }\n    }).pipe(catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n  update(dto) {\n    return this.http.put(this.url, dto).pipe(map(() => {\n      this.notifyService.showSuccess('Operation successfully updated!');\n      this.savingService.getBalance().subscribe();\n    }), catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n  delete(dto) {\n    return this.http.delete(this.url, {\n      params: JSON.parse(JSON.stringify(dto))\n    }).pipe(map(() => {\n      this.notifyService.showSuccess('Operation successfully deleted!');\n      this.savingService.getBalance().subscribe();\n    }), catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n}\nOperationService.ɵfac = function OperationService_Factory(t) {\n  return new (t || OperationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SavingService), i0.ɵɵinject(i3.NotifyService), i0.ɵɵinject(i4.RemoveNullValuesPipe));\n};\nOperationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OperationService,\n  factory: OperationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["throwError","catchError","map","environment","OperationService","constructor","http","savingService","notifyService","removeNullValuesPipe","apiUrl","create","dto","post","url","pipe","operation","showSuccess","getBalance","subscribe","err","showError","error","message","get","params","ppage","limit","filter","update","put","delete","JSON","parse","stringify","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\operations\\operation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { environment } from 'src/environments/environment'; \nimport { NotifyService } from 'src/app/shared/services/notify.service';\nimport { SavingService } from '../savings/saving.service';\nimport { CreateOperationDto } from './dto/create-operation.dto';\nimport { GetOperationsDto } from './dto/get-operations.dto';\nimport { UpdateOperationDto } from './dto/update-operation.dto';\nimport { DeleteOperationDto } from './dto/delete-operation.dto';\nimport { Operation } from './operation.model';\nimport { RemoveNullValuesPipe } from 'src/app/shared/pipes/remove-null-values.pipe';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class OperationService {\n    private readonly url = environment.apiUrl + 'operations/';\n    \n    constructor(\n        private http: HttpClient,\n        private savingService: SavingService,\n        private notifyService: NotifyService,\n        private removeNullValuesPipe: RemoveNullValuesPipe,\n    ) { }\n \n    create(dto: CreateOperationDto): Observable<Operation> {\n        return this.http.post<Operation>(this.url, dto).pipe(\n            map(operation => {\n                this.notifyService.showSuccess('Operation successfully created!');\n                this.savingService.getBalance().subscribe();\n                return operation;\n            }),\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n\n    get(dto: GetOperationsDto): Observable<{ count: number, rows: Operation[] }> {\n        return this.http.get<{ count: number, rows: Operation[] }>(this.url, {\n            params: {ppage:1, limit: 100, filter: {}}\n        }).pipe(\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n\n    update(dto: UpdateOperationDto): Observable<void> {\n        return this.http.put<void>(this.url, dto).pipe(\n            map(() => {\n                this.notifyService.showSuccess('Operation successfully updated!');\n                this.savingService.getBalance().subscribe();\n            }), \n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n\n    delete(dto: DeleteOperationDto) {\n        return this.http.delete<void>(this.url, {\n            params: JSON.parse(JSON.stringify(dto))\n        }).pipe(\n            map(() => {\n                this.notifyService.showSuccess('Operation successfully deleted!');\n                this.savingService.getBalance().subscribe();\n            }),\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}