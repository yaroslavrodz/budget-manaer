{"ast":null,"code":"import { Validators, FormControl, FormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/modules/user/user.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction UpdatePasswordComponent_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdatePasswordComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, UpdatePasswordComponent_div_5_div_1_Template, 2, 0, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.currentPassword == null ? null : ctx_r0.currentPassword.errors == null ? null : ctx_r0.currentPassword.errors.required);\n  }\n}\nfunction UpdatePasswordComponent_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdatePasswordComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, UpdatePasswordComponent_div_10_div_1_Template, 2, 0, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.newPassword == null ? null : ctx_r1.newPassword.errors == null ? null : ctx_r1.newPassword.errors.required);\n  }\n}\nexport class UpdatePasswordComponent {\n  get newPassword() {\n    return this.updatePasswordForm.get('newPassword');\n  }\n  get currentPassword() {\n    return this.updatePasswordForm.get('currentPassword');\n  }\n  constructor(userService) {\n    this.userService = userService;\n    this.updatePasswordForm = new FormGroup({\n      newPassword: new FormControl('', Validators.compose([Validators.required])),\n      currentPassword: new FormControl('', Validators.compose([Validators.required]))\n    });\n  }\n  updatePassword() {\n    this.userService.updatePassword(this.updatePasswordForm.value).subscribe(() => this.updatePasswordForm.reset(), err => console.error(err.error.message));\n  }\n}\nUpdatePasswordComponent.ɵfac = function UpdatePasswordComponent_Factory(t) {\n  return new (t || UpdatePasswordComponent)(i0.ɵɵdirectiveInject(i1.UserService));\n};\nUpdatePasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdatePasswordComponent,\n  selectors: [[\"app-update-password\"]],\n  decls: 13,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"input-group\"], [\"type\", \"text\", \"placeholder\", \"New password\", \"formControlName\", \"currentPassword\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"type\", \"text\", \"placeholder\", \"New password\", \"formControlName\", \"newPassword\"], [\"type\", \"submit\", 1, \"light\", 3, \"disabled\"], [1, \"error-message\"], [4, \"ngIf\"]],\n  template: function UpdatePasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdatePasswordComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.updatePassword();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\");\n      i0.ɵɵtext(3, \"Current password: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵtemplate(5, UpdatePasswordComponent_div_5_Template, 2, 1, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 1)(7, \"label\");\n      i0.ɵɵtext(8, \"New password: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 4);\n      i0.ɵɵtemplate(10, UpdatePasswordComponent_div_10_Template, 2, 1, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 5);\n      i0.ɵɵtext(12, \" Update \");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.updatePasswordForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.currentPassword == null ? null : ctx.currentPassword.invalid) && (ctx.currentPassword == null ? null : ctx.currentPassword.dirty));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.newPassword == null ? null : ctx.newPassword.invalid) && (ctx.newPassword == null ? null : ctx.newPassword.dirty));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.updatePasswordForm.invalid);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\".input-group[_ngcontent-%COMP%], button[_ngcontent-%COMP%] {\\n  margin: 10px 0;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9kdWxlcy91c2VyL2NvbXBvbmVudHMvdXBkYXRlLXBhc3N3b3JkL3VwZGF0ZS1wYXNzd29yZC5jb21wb25lbnQuc2NzcyIsIndlYnBhY2s6Ly8uLy4uLy4uLy4uLyVEMCVBMCVEMCVCMCVEMCVCMSVEMCVCRSVEMSU4NyVEMCVCOCVEMCVCOSUyMCVEMSU4MSVEMSU4MiVEMCVCRSVEMCVCQi8lRDAlOUQlRDAlQkUlRDAlQjIlRDAlQjAlRDElOEYlMjAlRDAlQkYlRDAlQjAlRDAlQkYlRDAlQkElRDAlQjAlMjAoOCkvY2xpZW50L3NyYy9hcHAvbW9kdWxlcy91c2VyL2NvbXBvbmVudHMvdXBkYXRlLXBhc3N3b3JkL3VwZGF0ZS1wYXNzd29yZC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGNBQUE7QUNDSiIsInNvdXJjZXNDb250ZW50IjpbIi5pbnB1dC1ncm91cCwgYnV0dG9uIHtcbiAgICBtYXJnaW46IDEwcHggMDtcbn0iLCIuaW5wdXQtZ3JvdXAsIGJ1dHRvbiB7XG4gIG1hcmdpbjogMTBweCAwO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,UAAU,EAAEC,WAAW,EAAEC,SAAS,QAAQ,gBAAgB;;;;;;;ICYvDC,2BAA+C;IAAAA,wBAAQ;IAAAA,iBAAM;;;;;IAJjEA,8BAE0B;IAEtBA,8EAA6D;IACjEA,iBAAM;;;;IADIA,eAAuC;IAAvCA,oJAAuC;;;;;IAgB7CA,2BAA2C;IAAAA,wBAAQ;IAAAA,iBAAM;;;;;IAJ7DA,8BAE0B;IAEtBA,+EAAyD;IAC7DA,iBAAM;;;;IADIA,eAAmC;IAAnCA,wIAAmC;;;ADnBrD,OAAM,MAAOC,uBAAuB;EAUhC,IAAIC,WAAW;IAAK,OAAO,IAAI,CAACC,kBAAkB,CAACC,GAAG,CAAC,aAAa,CAAC;EAAE;EACvE,IAAIC,eAAe;IAAK,OAAO,IAAI,CAACF,kBAAkB,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAAE;EAE/EE,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAZ/B,uBAAkB,GAAG,IAAIR,SAAS,CAAC;MAC/BG,WAAW,EAAE,IAAIJ,WAAW,CAAC,EAAE,EAAED,UAAU,CAACW,OAAO,CAAC,CAChDX,UAAU,CAACY,QAAQ,CACtB,CAAC,CAAC;MACHJ,eAAe,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAED,UAAU,CAACW,OAAO,CAAC,CACpDX,UAAU,CAACY,QAAQ,CACtB,CAAC;KACL,CAAC;EAK8C;EAEhDC,cAAc;IACV,IAAI,CAACH,WAAW,CAACG,cAAc,CAAC,IAAI,CAACP,kBAAkB,CAACQ,KAAK,CAAC,CAACC,SAAS,CACpE,MAAM,IAAI,CAACT,kBAAkB,CAACU,KAAK,EAAE,EACrCC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAACE,KAAK,CAACC,OAAO,CAAC,CAC1C;EACL;;AApBShB,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;QAAvBA,uBAAuB;EAAAiB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVpCtB,+BAAqE;MAA9BA;QAAA,OAAYuB,oBAAgB;MAAA,EAAC;MAChEvB,8BAAyB;MACdA,kCAAkB;MAAAA,iBAAQ;MAEjCA,2BAGsC;MAEtCA,wEAKM;MACVA,iBAAM;MAENA,8BAAyB;MACdA,8BAAc;MAAAA,iBAAQ;MAE7BA,2BAGkC;MAElCA,0EAKM;MACVA,iBAAM;MAENA,kCAG4C;MACxCA,yBACJ;MAAAA,iBAAS;;;MAtCPA,kDAAgC;MAUzBA,eAAwD;MAAxDA,6JAAwD;MAgBxDA,eAAgD;MAAhDA,6IAAgD;MAUrDA,eAAuC;MAAvCA,yDAAuC","names":["Validators","FormControl","FormGroup","i0","UpdatePasswordComponent","newPassword","updatePasswordForm","get","currentPassword","constructor","userService","compose","required","updatePassword","value","subscribe","reset","err","console","error","message","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\user\\components\\update-password\\update-password.component.ts","C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\user\\components\\update-password\\update-password.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Validators, FormControl, FormGroup } from '@angular/forms';\n\nimport { UserService } from 'src/app/modules/user/user.service';\n\n@Component({\n    selector: 'app-update-password',\n    templateUrl: './update-password.component.html',\n    styleUrls: ['./update-password.component.scss']\n})\nexport class UpdatePasswordComponent {\n    updatePasswordForm = new FormGroup({\n        newPassword: new FormControl('', Validators.compose([\n            Validators.required\n        ])),\n        currentPassword: new FormControl('', Validators.compose([\n            Validators.required\n        ]))\n    });\n\n    get newPassword() { return this.updatePasswordForm.get('newPassword'); }\n    get currentPassword() { return this.updatePasswordForm.get('currentPassword'); }\n\n    constructor(private userService: UserService) { }\n\n    updatePassword() {\n        this.userService.updatePassword(this.updatePasswordForm.value).subscribe(\n            () => this.updatePasswordForm.reset(),\n            err => console.error(err.error.message)\n        );\n    }\n}","<form [formGroup]=\"updatePasswordForm\" (ngSubmit)=\"updatePassword()\">\n    <div class=\"input-group\">\n        <label>Current password: </label>\n\n        <input\n            type=\"text\"\n            placeholder=\"New password\"\n            formControlName=\"currentPassword\">\n\n        <div \n            *ngIf=\"currentPassword?.invalid && currentPassword?.dirty\"\n            class=\"error-message\">\n\n            <div *ngIf=\"currentPassword?.errors?.required\">Required</div>\n        </div>\n    </div>\n\n    <div class=\"input-group\">\n        <label>New password: </label>\n\n        <input\n            type=\"text\"\n            placeholder=\"New password\"\n            formControlName=\"newPassword\">\n\n        <div \n            *ngIf=\"newPassword?.invalid && newPassword?.dirty\"\n            class=\"error-message\">\n\n            <div *ngIf=\"newPassword?.errors?.required\">Required</div>\n        </div>\n    </div>\n\n    <button\n        type=\"submit\"\n        class=\"light\"\n        [disabled]=\"updatePasswordForm.invalid\">\n        Update\n    </button>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}