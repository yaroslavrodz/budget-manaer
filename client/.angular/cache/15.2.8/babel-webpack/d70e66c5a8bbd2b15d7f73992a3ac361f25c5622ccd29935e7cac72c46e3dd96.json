{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/notify.service\";\nexport class SavingService {\n  constructor(http, notifyService) {\n    this.http = http;\n    this.notifyService = notifyService;\n    this.url = environment.apiUrl + 'savings/';\n    this.balance$ = new BehaviorSubject(null);\n  }\n  create(dto) {\n    return this.http.post(this.url, dto).pipe(map(saving => {\n      this.notifyService.showSuccess('Saving successfully created!');\n      this.getBalance().subscribe();\n      return saving;\n    }), catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n  get(type = null) {\n    let params;\n    type !== null ? params = {\n      type\n    } : params = {};\n    return this.http.get(this.url, {\n      params: {\n        page: 1,\n        limit: 100,\n        filter: '{}'\n      }\n    }).pipe(catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n  update(dto) {\n    return this.http.put(this.url, dto).pipe(map(() => {\n      this.notifyService.showSuccess('Saving successfully updated!');\n      this.getBalance().subscribe();\n    }), catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n  delete(dto) {\n    return this.http.delete(this.url, {\n      params: {\n        ...dto\n      }\n    }).pipe(map(() => {\n      this.notifyService.showSuccess('Saving successfully deleted!');\n      this.getBalance().subscribe();\n    }), catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n  getBalance() {\n    return this.http.get(this.url + 'balance').pipe(map(value => this.balance$.next(value)), catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n}\nSavingService.ɵfac = function SavingService_Factory(t) {\n  return new (t || SavingService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotifyService));\n};\nSavingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SavingService,\n  factory: SavingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","throwError","catchError","map","environment","SavingService","constructor","http","notifyService","apiUrl","create","dto","post","url","pipe","saving","showSuccess","getBalance","subscribe","err","showError","error","message","get","type","params","page","limit","filter","update","put","delete","value","balance$","next","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\savings\\saving.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { environment } from 'src/environments/environment'; \nimport { NotifyService } from 'src/app/shared/services/notify.service';\nimport { Saving } from './saving.model';\nimport { CreateSavingDto } from './dto/create-saving.dto';\nimport { UpdateSavingDto } from './dto/update-saving.dto';\nimport { DeleteSavingDto } from './dto/delete-saving.dto';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SavingService {\n    private readonly url = environment.apiUrl + 'savings/';\n    balance$ = new BehaviorSubject<number | null>(null);\n    \n    constructor(\n        private http: HttpClient,\n        private notifyService: NotifyService,\n    ) { }\n\n    create(dto: CreateSavingDto): Observable<Saving> {\n        return this.http.post<Saving>(this.url, dto).pipe(\n            map(saving => {\n                this.notifyService.showSuccess('Saving successfully created!');\n                this.getBalance().subscribe();\n                return saving;\n            }),\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n\n    get(type: string | null = null): Observable<Saving[]> {\n        let params;\n        (type !== null) ? params = {type} : params =  {};\n        return this.http.get<Saving[]>(this.url, {\n            params: {page:1, limit: 100, filter: '{}'}\n        }).pipe(\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n\n    update(dto: UpdateSavingDto): Observable<void> {\n        return this.http.put<void>(this.url, dto).pipe(\n            map(() => {\n                this.notifyService.showSuccess('Saving successfully updated!');\n                this.getBalance().subscribe();\n            }),\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n\n    delete(dto: DeleteSavingDto): Observable<void> {\n        return this.http.delete<void>(this.url, { params: { ...dto } }).pipe(\n            map(() => {\n                this.notifyService.showSuccess('Saving successfully deleted!');\n                this.getBalance().subscribe();\n            }),\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n\n    getBalance(): Observable<void> {\n        return this.http.get<number>(this.url + 'balance').pipe(\n            map(value => this.balance$.next(value)),\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}