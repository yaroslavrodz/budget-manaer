{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/modules/auth/auth.service\";\nimport * as i2 from \"../../user.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction UpdateUserComponent_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateUserComponent_div_5_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Only latin characters and numbers allowed\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateUserComponent_div_5_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Min length equals to 4 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateUserComponent_div_5_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Max length equals to 12 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateUserComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, UpdateUserComponent_div_5_div_1_Template, 2, 0, \"div\", 7);\n    i0.ɵɵtemplate(2, UpdateUserComponent_div_5_div_2_Template, 2, 0, \"div\", 7);\n    i0.ɵɵtemplate(3, UpdateUserComponent_div_5_div_3_Template, 2, 0, \"div\", 7);\n    i0.ɵɵtemplate(4, UpdateUserComponent_div_5_div_4_Template, 2, 0, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.username == null ? null : ctx_r0.username.errors == null ? null : ctx_r0.username.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.username == null ? null : ctx_r0.username.errors == null ? null : ctx_r0.username.errors[\"pattern\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.username == null ? null : ctx_r0.username.errors == null ? null : ctx_r0.username.errors[\"minlength\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.username == null ? null : ctx_r0.username.errors == null ? null : ctx_r0.username.errors[\"maxlength\"]);\n  }\n}\nfunction UpdateUserComponent_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateUserComponent_div_10_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Invalid email\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateUserComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, UpdateUserComponent_div_10_div_1_Template, 2, 0, \"div\", 7);\n    i0.ɵɵtemplate(2, UpdateUserComponent_div_10_div_2_Template, 2, 0, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.email == null ? null : ctx_r1.email.errors == null ? null : ctx_r1.email.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.email == null ? null : ctx_r1.email.errors == null ? null : ctx_r1.email.errors[\"email\"]);\n  }\n}\nexport class UpdateUserComponent {\n  get username() {\n    return this.form.get('username');\n  }\n  get email() {\n    return this.form.get('email');\n  }\n  constructor(authService, userService) {\n    this.authService = authService;\n    this.userService = userService;\n    this.form = new FormGroup({\n      username: new FormControl('', Validators.compose([Validators.required, Validators.minLength(4), Validators.maxLength(12), Validators.pattern('^[a-zA-Z0-9]+$')])),\n      email: new FormControl('', Validators.compose([Validators.required, Validators.email]))\n    });\n  }\n  update() {\n    this.userService.updateUser(this.form.value).subscribe();\n  }\n  ngOnInit() {\n    const status = this.authService.getStatus();\n    if (status) {\n      const user = status.user;\n      this.form.patchValue({\n        username: user.username,\n        email: user.email\n      });\n    }\n  }\n}\nUpdateUserComponent.ɵfac = function UpdateUserComponent_Factory(t) {\n  return new (t || UpdateUserComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.UserService));\n};\nUpdateUserComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdateUserComponent,\n  selectors: [[\"app-update-user\"]],\n  decls: 13,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"input-group\"], [\"type\", \"text\", \"placeholder\", \"Username\", \"formControlName\", \"username\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"type\", \"email\", \"placeholder\", \"Email\", \"formControlName\", \"email\"], [\"type\", \"submit\", 1, \"light\", 3, \"disabled\"], [1, \"error-message\"], [4, \"ngIf\"]],\n  template: function UpdateUserComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdateUserComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.update();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\");\n      i0.ɵɵtext(3, \"Username: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵtemplate(5, UpdateUserComponent_div_5_Template, 5, 4, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 1)(7, \"label\");\n      i0.ɵɵtext(8, \"Email: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 4);\n      i0.ɵɵtemplate(10, UpdateUserComponent_div_10_Template, 3, 2, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 5);\n      i0.ɵɵtext(12, \" Update \");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.username == null ? null : ctx.username.invalid) && (ctx.username == null ? null : ctx.username.dirty));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.email == null ? null : ctx.email.invalid) && (ctx.email == null ? null : ctx.email.dirty));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.form.invalid);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n  styles: [\".input-group[_ngcontent-%COMP%], button[_ngcontent-%COMP%] {\\n  margin: 10px 0;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9kdWxlcy91c2VyL2NvbXBvbmVudHMvdXBkYXRlLXVzZXIvdXBkYXRlLXVzZXIuY29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi8uLi8uLi8lRDAlQTAlRDAlQjAlRDAlQjElRDAlQkUlRDElODclRDAlQjglRDAlQjklMjAlRDElODElRDElODIlRDAlQkUlRDAlQkIvJUQwJTlEJUQwJUJFJUQwJUIyJUQwJUIwJUQxJThGJTIwJUQwJUJGJUQwJUIwJUQwJUJGJUQwJUJBJUQwJUIwJTIwKDgpL2NsaWVudC9zcmMvYXBwL21vZHVsZXMvdXNlci9jb21wb25lbnRzL3VwZGF0ZS11c2VyL3VwZGF0ZS11c2VyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksY0FBQTtBQ0NKIiwic291cmNlc0NvbnRlbnQiOlsiLmlucHV0LWdyb3VwLCBidXR0b24ge1xuICAgIG1hcmdpbjogMTBweCAwO1xufSIsIi5pbnB1dC1ncm91cCwgYnV0dG9uIHtcbiAgbWFyZ2luOiAxMHB4IDA7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAKA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;;ICSvDC,2BAA4C;IAAAA,wBAAQ;IAAAA,iBAAM;;;;;IAC1DA,2BAA2C;IAAAA,yDAAyC;IAAAA,iBAAM;;;;;IAC1FA,2BAA6C;IAAAA,iDAAiC;IAAAA,iBAAM;;;;;IACpFA,2BAA6C;IAAAA,kDAAkC;IAAAA,iBAAM;;;;;IAPzFA,8BAE0B;IAEtBA,0EAA0D;IAC1DA,0EAA0F;IAC1FA,0EAAoF;IACpFA,0EAAqF;IACzFA,iBAAM;;;;IAJIA,eAAoC;IAApCA,kIAAoC;IACpCA,eAAmC;IAAnCA,iIAAmC;IACnCA,eAAqC;IAArCA,mIAAqC;IACrCA,eAAqC;IAArCA,mIAAqC;;;;;IAgB3CA,2BAAyC;IAAAA,wBAAQ;IAAAA,iBAAM;;;;;IACvDA,2BAAsC;IAAAA,6BAAa;IAAAA,iBAAM;;;;;IAL7DA,8BAE0B;IAEtBA,2EAAuD;IACvDA,2EAAyD;IAC7DA,iBAAM;;;;IAFIA,eAAiC;IAAjCA,yHAAiC;IACjCA,eAA8B;IAA9BA,sHAA8B;;;ADrBhD,OAAM,MAAOC,mBAAmB;EAc5B,IAAIC,QAAQ;IAAK,OAAO,IAAI,CAACC,IAAI,CAACC,GAAG,CAAC,UAAU,CAAC;EAAE;EACnD,IAAIC,KAAK;IAAK,OAAO,IAAI,CAACF,IAAI,CAACC,GAAG,CAAC,OAAO,CAAC;EAAE;EAE7CE,YACYC,WAAwB,EACxBC,WAAwB;IADxB,gBAAW,GAAXD,WAAW;IACX,gBAAW,GAAXC,WAAW;IAlBvB,SAAI,GAAG,IAAIV,SAAS,CAAC;MACjBI,QAAQ,EAAE,IAAIL,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACU,OAAO,CAAC,CAC7CV,UAAU,CAACW,QAAQ,EACnBX,UAAU,CAACY,SAAS,CAAC,CAAC,CAAC,EACvBZ,UAAU,CAACa,SAAS,CAAC,EAAE,CAAC,EACxBb,UAAU,CAACc,OAAO,CAAC,gBAAgB,CAAC,CACvC,CAAC,CAAC;MACHR,KAAK,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACU,OAAO,CAAC,CAC1CV,UAAU,CAACW,QAAQ,EACnBX,UAAU,CAACM,KAAK,CACnB,CAAC;KACL,CAAC;EAQC;EAEHS,MAAM;IACF,IAAI,CAACN,WAAW,CAACO,UAAU,CAAC,IAAI,CAACZ,IAAI,CAACa,KAAmB,CAAC,CAACC,SAAS,EAAE;EAC1E;EAEAC,QAAQ;IACJ,MAAMC,MAAM,GAAG,IAAI,CAACZ,WAAW,CAACa,SAAS,EAAE;IAC3C,IAAID,MAAM,EAAE;MACR,MAAME,IAAI,GAAGF,MAAM,CAACE,IAAI;MACxB,IAAI,CAAClB,IAAI,CAACmB,UAAU,CAAC;QACjBpB,QAAQ,EAAEmB,IAAI,CAACnB,QAAQ;QACvBG,KAAK,EAAEgB,IAAI,CAAChB;OACf,CAAC;;EAEV;;AAnCSJ,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZhC3B,+BAA+C;MAAtBA;QAAA,OAAY4B,YAAQ;MAAA,EAAC;MAC1C5B,8BAAyB;MACdA,0BAAU;MAAAA,iBAAQ;MAEzBA,2BAG+B;MAE/BA,oEAQM;MACVA,iBAAM;MAENA,8BAAyB;MACdA,uBAAO;MAAAA,iBAAQ;MAEtBA,2BAG4B;MAE5BA,sEAMM;MACVA,iBAAM;MAENA,kCAG8B;MAC1BA,yBACJ;MAAAA,iBAAS;;;MA1CPA,oCAAkB;MAUXA,eAA0C;MAA1CA,iIAA0C;MAmB1CA,eAAoC;MAApCA,qHAAoC;MAWzCA,eAAyB;MAAzBA,2CAAyB","names":["FormControl","FormGroup","Validators","i0","UpdateUserComponent","username","form","get","email","constructor","authService","userService","compose","required","minLength","maxLength","pattern","update","updateUser","value","subscribe","ngOnInit","status","getStatus","user","patchValue","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\user\\components\\update-user\\update-user.component.ts","C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\user\\components\\update-user\\update-user.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\nimport { AuthService } from 'src/app/modules/auth/auth.service';\nimport { UserService } from '../../user.service';\nimport { User } from '../../user.model';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { UpdateUser } from '../../interfaces/update-user.interface';\n\n@Component({\n    selector: 'app-update-user',\n    templateUrl: './update-user.component.html',\n    styleUrls: ['./update-user.component.scss']\n})\nexport class UpdateUserComponent {\n    form = new FormGroup({\n        username: new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.minLength(4),\n            Validators.maxLength(12),\n            Validators.pattern('^[a-zA-Z0-9]+$'),\n        ])),\n        email: new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.email\n        ])),\n    });\n    \n    get username() { return this.form.get('username'); }\n    get email() { return this.form.get('email'); }\n\n    constructor(\n        private authService: AuthService,\n        private userService: UserService,\n    ) {}\n\n    update() {\n        this.userService.updateUser(this.form.value as UpdateUser).subscribe();\n    }\n    \n    ngOnInit() {\n        const status = this.authService.getStatus();\n        if (status) {\n            const user = status.user; \n            this.form.patchValue({\n                username: user.username,\n                email: user.email\n            });\n        }\n    }\n}","\n<form [formGroup]=\"form\" (ngSubmit)=\"update()\">\n    <div class=\"input-group\">\n        <label>Username: </label>\n        \n        <input\n            type=\"text\"\n            placeholder=\"Username\"\n            formControlName=\"username\">\n\n        <div \n            *ngIf=\"username?.invalid && username?.dirty\"\n            class=\"error-message\">\n\n            <div *ngIf=\"username?.errors?.['required']\">Required</div>\n            <div *ngIf=\"username?.errors?.['pattern']\">Only latin characters and numbers allowed</div>\n            <div *ngIf=\"username?.errors?.['minlength']\">Min length equals to 4 characters</div>\n            <div *ngIf=\"username?.errors?.['maxlength']\">Max length equals to 12 characters</div>\n        </div>\n    </div>\n\n    <div class=\"input-group\">\n        <label>Email: </label>\n       \n        <input\n            type=\"email\"\n            placeholder=\"Email\"\n            formControlName=\"email\">\n\n        <div \n            *ngIf=\"email?.invalid && email?.dirty\"\n            class=\"error-message\">\n\n            <div *ngIf=\"email?.errors?.['required']\">Required</div>\n            <div *ngIf=\"email?.errors?.['email']\">Invalid email</div>\n        </div>\n    </div>\n\n    <button\n        type=\"submit\"\n        class=\"light\"\n        [disabled]=\"form.invalid\">\n        Update\n    </button>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}