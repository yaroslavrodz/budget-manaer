{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/notify.service\";\nexport class CategoryService {\n  constructor(http, notifyService) {\n    this.http = http;\n    this.notifyService = notifyService;\n    this.url = environment.apiUrl + 'categories/';\n  }\n  create(dto) {\n    return this.http.post(this.url, dto).pipe(map(category => {\n      this.notifyService.showSuccess('Category successfully created!');\n      return category;\n    }), catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n  get() {\n    return this.http.get(this.url, {\n      params: {\n        page: 1,\n        limit: 100,\n        filter: '{}'\n      }\n    }).pipe(catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n  update(dto) {\n    return this.http.put(this.url, dto).pipe(map(() => this.notifyService.showSuccess('Category successfully updated!')), catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n  delete(dto) {\n    return this.http.delete(this.url, {\n      params: JSON.parse(JSON.stringify(dto))\n    }).pipe(map(() => this.notifyService.showSuccess('Category successfully deleted!')), catchError(err => {\n      this.notifyService.showError(err.error.message);\n      return throwError(err);\n    }));\n  }\n}\nCategoryService.ɵfac = function CategoryService_Factory(t) {\n  return new (t || CategoryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotifyService));\n};\nCategoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CategoryService,\n  factory: CategoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,8BAA8B;;;;AAU1D,OAAM,MAAOC,eAAe;EAGxBC,YACYC,IAAgB,EAChBC,aAA4B;IAD5B,SAAI,GAAJD,IAAI;IACJ,kBAAa,GAAbC,aAAa;IAJR,QAAG,GAAGJ,WAAW,CAACK,MAAM,GAAG,aAAa;EAKrD;EAEJC,MAAM,CAACC,GAAsB;IACzB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAW,IAAI,CAACC,GAAG,EAAEF,GAAG,CAAC,CAACG,IAAI,CAC/CX,GAAG,CAACY,QAAQ,IAAG;MACX,IAAI,CAACP,aAAa,CAACQ,WAAW,CAAC,gCAAgC,CAAC;MAChE,OAAOD,QAAQ;IACnB,CAAC,CAAC,EACFb,UAAU,CAACe,GAAG,IAAG;MACb,IAAI,CAACT,aAAa,CAACU,SAAS,CAACD,GAAG,CAACE,KAAK,CAACC,OAAO,CAAC;MAC/C,OAAOnB,UAAU,CAACgB,GAAG,CAAC;IAC1B,CAAC,CAAC,CACL;EACL;EAEAI,GAAG;IACC,OAAO,IAAI,CAACd,IAAI,CAACc,GAAG,CAAa,IAAI,CAACR,GAAG,EAAE;MACvCS,MAAM,EAAE;QAACC,IAAI,EAAC,CAAC;QAAEC,KAAK,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAI;KAC5C,CAAC,CAACX,IAAI,CACHZ,UAAU,CAACe,GAAG,IAAG;MACb,IAAI,CAACT,aAAa,CAACU,SAAS,CAACD,GAAG,CAACE,KAAK,CAACC,OAAO,CAAC;MAC/C,OAAOnB,UAAU,CAACgB,GAAG,CAAC;IAC1B,CAAC,CAAC,CACL;EACL;EAEAS,MAAM,CAACf,GAAsB;IACzB,OAAO,IAAI,CAACJ,IAAI,CAACoB,GAAG,CAAO,IAAI,CAACd,GAAG,EAAEF,GAAG,CAAC,CAACG,IAAI,CAC1CX,GAAG,CAAC,MAAM,IAAI,CAACK,aAAa,CAACQ,WAAW,CAAC,gCAAgC,CAAC,CAAC,EAC3Ed,UAAU,CAACe,GAAG,IAAG;MACb,IAAI,CAACT,aAAa,CAACU,SAAS,CAACD,GAAG,CAACE,KAAK,CAACC,OAAO,CAAC;MAC/C,OAAOnB,UAAU,CAACgB,GAAG,CAAC;IAC1B,CAAC,CAAC,CACL;EACL;EAEAW,MAAM,CAACjB,GAAsB;IACzB,OAAO,IAAI,CAACJ,IAAI,CAACqB,MAAM,CAAO,IAAI,CAACf,GAAG,EAAE;MACpCS,MAAM,EAAEO,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACpB,GAAG,CAAC;KACzC,CAAC,CAACG,IAAI,CACHX,GAAG,CAAC,MAAM,IAAI,CAACK,aAAa,CAACQ,WAAW,CAAC,gCAAgC,CAAC,CAAC,EAC3Ed,UAAU,CAACe,GAAG,IAAG;MACb,IAAI,CAACT,aAAa,CAACU,SAAS,CAACD,GAAG,CAACE,KAAK,CAACC,OAAO,CAAC;MAC/C,OAAOnB,UAAU,CAACgB,GAAG,CAAC;IAC1B,CAAC,CAAC,CACL;EACL;;AApDSZ,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA2B,SAAf3B,eAAe;EAAA4B,YAFZ;AAAM","names":["throwError","catchError","map","environment","CategoryService","constructor","http","notifyService","apiUrl","create","dto","post","url","pipe","category","showSuccess","err","showError","error","message","get","params","page","limit","filter","update","put","delete","JSON","parse","stringify","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dh123\\OneDrive\\Рабочий стол\\Новая папка (8)\\client\\src\\app\\modules\\categories\\categories.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { environment } from 'src/environments/environment'; \nimport { NotifyService } from 'src/app/shared/services/notify.service';\nimport { Category } from './category.model';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { DeleteCategoryDto } from './dto/delete-saving.dto';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CategoryService {\n    private readonly url = environment.apiUrl + 'categories/';\n    \n    constructor(\n        private http: HttpClient,\n        private notifyService: NotifyService,\n    ) { }\n\n    create(dto: CreateCategoryDto): Observable<Category> {\n        return this.http.post<Category>(this.url, dto).pipe(\n            map(category => {\n                this.notifyService.showSuccess('Category successfully created!');\n                return category;\n            }),\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n\n    get(): Observable<Category[]> {\n        return this.http.get<Category[]>(this.url, {\n            params: {page:1, limit: 100, filter: '{}'}\n        }).pipe(\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n\n    update(dto: UpdateCategoryDto): Observable<void> {\n        return this.http.put<void>(this.url, dto).pipe(\n            map(() => this.notifyService.showSuccess('Category successfully updated!')),\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n\n    delete(dto: DeleteCategoryDto): Observable<void> {\n        return this.http.delete<void>(this.url, {\n            params: JSON.parse(JSON.stringify(dto))\n        }).pipe(\n            map(() => this.notifyService.showSuccess('Category successfully deleted!')),\n            catchError(err => {\n                this.notifyService.showError(err.error.message);\n                return throwError(err);\n            })\n        );\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}